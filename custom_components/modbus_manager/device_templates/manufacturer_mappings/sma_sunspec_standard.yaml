# SMA Inverter Template basierend auf SunSpec Standard
# Verwendet die korrekte SunSpec-Modellstruktur mit Offsets

name: "SMA Inverter (SunSpec Standard)"
extends: "SunSpec Standard"
version: 1
description: "SMA Wechselrichter mit standardkonformem SunSpec-Mapping"
manufacturer: "SMA"
model: "Sunny Boy/Tripower/Storage"

# SunSpec-Modellbasis-Adressen für SMA
# SMA implementiert SunSpec ab Register 40001 (Modbus-Adresse 0)
model_addresses:
  common_model: 40001   # Common Model (1) beginnt bei 40001
  inverter_model: 40069  # Inverter Model (103) beginnt bei 40069
  storage_model: 40187   # Storage Model (124) beginnt bei 40187
  meter_model: 40277     # Meter Model (203) beginnt bei 40277

# Herstellerspezifische Register, die nicht Teil des SunSpec-Standards sind
custom_registers:
  - name: "Operating Time"
    unique_id: "operating_time"
    address: 40093
    input_type: "holding"
    data_type: "uint32"
    count: 2
    precision: 0
    unit_of_measurement: "h"
    state_class: "total_increasing"
    scan_interval: 300
    description: "Total Operating Time"
    group: "system"

  - name: "Feed-in Time"
    unique_id: "feed_in_time"
    address: 40095
    input_type: "holding"
    data_type: "uint32"
    count: 2
    precision: 0
    unit_of_measurement: "h"
    state_class: "total_increasing"
    scan_interval: 300
    description: "Total Feed-in Time"
    group: "system"

  - name: "Daily Yield"
    unique_id: "daily_yield"
    address: 40097
    input_type: "holding"
    data_type: "uint32"
    count: 2
    precision: 0
    unit_of_measurement: "Wh"
    device_class: "energy"
    state_class: "total_increasing"
    scan_interval: 60
    description: "Energy Generated Today"
    group: "energy_daily"

  - name: "Monthly Yield"
    unique_id: "monthly_yield"
    address: 40099
    input_type: "holding"
    data_type: "uint32"
    count: 2
    precision: 0
    unit_of_measurement: "Wh"
    device_class: "energy"
    state_class: "total_increasing"
    scan_interval: 300
    description: "Energy Generated This Month"
    group: "energy_monthly"

  - name: "Yearly Yield"
    unique_id: "yearly_yield"
    address: 40101
    input_type: "holding"
    data_type: "uint32"
    count: 2
    precision: 0
    unit_of_measurement: "Wh"
    device_class: "energy"
    state_class: "total_increasing"
    scan_interval: 300
    description: "Energy Generated This Year"
    group: "energy_yearly"

  # MPPT-spezifische Register
  - name: "MPPT 1 DC Current"
    unique_id: "mppt1_dc_current"
    address: 40263
    input_type: "holding"
    data_type: "uint16"
    precision: 1
    unit_of_measurement: "A"
    device_class: "current"
    state_class: "measurement"
    scale: 0.1
    scan_interval: 60
    description: "MPPT 1 DC Current"
    group: "mppt1"

  - name: "MPPT 1 DC Voltage"
    unique_id: "mppt1_dc_voltage"
    address: 40264
    input_type: "holding"
    data_type: "uint16"
    precision: 1
    unit_of_measurement: "V"
    device_class: "voltage"
    state_class: "measurement"
    scale: 0.1
    scan_interval: 60
    description: "MPPT 1 DC Voltage"
    group: "mppt1"

  - name: "MPPT 1 DC Power"
    unique_id: "mppt1_dc_power"
    address: 40265
    input_type: "holding"
    data_type: "uint16"
    precision: 0
    unit_of_measurement: "W"
    device_class: "power"
    state_class: "measurement"
    scale: 1
    scan_interval: 60
    description: "MPPT 1 DC Power"
    group: "mppt1"

  - name: "MPPT 2 DC Current"
    unique_id: "mppt2_dc_current"
    address: 40266
    input_type: "holding"
    data_type: "uint16"
    precision: 1
    unit_of_measurement: "A"
    device_class: "current"
    state_class: "measurement"
    scale: 0.1
    scan_interval: 60
    description: "MPPT 2 DC Current"
    group: "mppt2"

  - name: "MPPT 2 DC Voltage"
    unique_id: "mppt2_dc_voltage"
    address: 40267
    input_type: "holding"
    data_type: "uint16"
    precision: 1
    unit_of_measurement: "V"
    device_class: "voltage"
    state_class: "measurement"
    scale: 0.1
    scan_interval: 60
    description: "MPPT 2 DC Voltage"
    group: "mppt2"

  - name: "MPPT 2 DC Power"
    unique_id: "mppt2_dc_power"
    address: 40268
    input_type: "holding"
    data_type: "uint16"
    precision: 0
    unit_of_measurement: "W"
    device_class: "power"
    state_class: "measurement"
    scale: 1
    scan_interval: 60
    description: "MPPT 2 DC Power"
    group: "mppt2"

# Herstellerspezifische Controls
custom_controls:
  - type: "select"
    name: "Operation Mode"
    address: 40151
    input_type: "holding"
    data_type: "uint16"
    options:
      1: "On"
      2: "Off"
      3: "Standby"
    group: "control"

  - type: "number"
    name: "Active Power Limit"
    address: 40153
    input_type: "holding"
    data_type: "uint16"
    precision: 1
    unit_of_measurement: "%"
    device_class: null
    state_class: "measurement"
    scale: 0.1
    min_value: 0
    max_value: 100
    step: 1
    group: "control"

  - type: "select"
    name: "Battery Operating Mode"
    address: 40800
    input_type: "holding"
    data_type: "uint16"
    options:
      1: "Off"
      2: "Automatic"
      3: "Charge"
      4: "Discharge"
    group: "battery_control"

# Berechnete Entitäten
calculated:
  - name: "Self Consumption"
    unique_id: "self_consumption"
    type: "sensor"
    availability: >-
      {{ 
      not is_state('sensor.{PREFIX}_i_dc_power', 'unavailable') and
      not is_state('sensor.{PREFIX}_m_ac_power', 'unavailable') 
      }}
    template: >-
      {% set pv_power = states('sensor.{PREFIX}_i_dc_power') | float(0) %}
      {% set grid_power = states('sensor.{PREFIX}_m_ac_power') | float(0) %}
      {% if pv_power > 0 %}
        {% set self_consumption = pv_power - (grid_power * -1) if grid_power < 0 else pv_power %}
        {{ [0, self_consumption] | max }}
      {% else %}
        0
      {% endif %}
    unit_of_measurement: "W"
    device_class: "power"
    state_class: "measurement"
    group: "power_flow"

  - name: "Inverter Efficiency"
    unique_id: "inverter_efficiency"
    type: "sensor"
    availability: >-
      {{ 
      not is_state('sensor.{PREFIX}_i_dc_power', 'unavailable') and
      not is_state('sensor.{PREFIX}_i_ac_power', 'unavailable') and
      states('sensor.{PREFIX}_i_dc_power') | float(0) > 100
      }}
    template: >-
      {% set dc = states('sensor.{PREFIX}_i_dc_power') | float(0) %}
      {% set ac = states('sensor.{PREFIX}_i_ac_power') | float(0) %}
      {% if dc > 0 %}{{ ((ac / dc) * 100) | round(1) }}{% else %}0{% endif %}
    unit_of_measurement: "%"
    device_class: "power_factor"
    state_class: "measurement"
    group: "efficiency"

  - name: "Home Consumption"
    unique_id: "home_consumption"
    type: "sensor"
    availability: >-
      {{ 
      not is_state('sensor.{PREFIX}_i_ac_power', 'unavailable') and
      not is_state('sensor.{PREFIX}_m_ac_power', 'unavailable')
      }}
    template: >-
      {% set inverter_power = states('sensor.{PREFIX}_i_ac_power') | float(0) %}
      {% set grid_power = states('sensor.{PREFIX}_m_ac_power') | float(0) %}
      {{ inverter_power + grid_power }}
    unit_of_measurement: "W"
    device_class: "power"
    state_class: "measurement"
    group: "power_flow"
