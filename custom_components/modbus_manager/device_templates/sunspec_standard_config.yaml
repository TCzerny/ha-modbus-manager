# SunSpec Standard Configuration Template
# Benutzer gibt Modell-Adressen an, Rest wird automatisch berechnet

name: "SunSpec Standard Configuration"
extends: "SunSpec Standard"
version: 1
description: "SunSpec Standard-Konfiguration - Benutzer gibt Modell-Adressen an"
manufacturer: "SunSpec Standard"
model: "Generic"
default_prefix: "sunspec"  # Default prefix for entity names
type: "PV_inverter"
firmware_version: "1.0.0"

# Erforderliche Konfigurationsfelder
required_fields:
  - prefix      # Eindeutiger Prefix für alle Entities
  - name        # Anzeigename für das Gerät (optional)
  - common_model_address    # Basisadresse für Common Model (1)
  - inverter_model_address  # Basisadresse für Inverter Model (103)
  - storage_model_address   # Basisadresse für Storage Model (124) - optional
  - meter_model_address     # Basisadresse für Meter Model (203) - optional

# Automatisch generierte Sensoren basierend auf SunSpec-Standard
auto_generated_sensors:
  # Common Model (1) - Geräteinformationen
  common_model:
    enabled: true
    groups:
      - "device_info"

  # Inverter Model (103) - Wechselrichter-Daten
  inverter_model:
    enabled: true
    groups:
      - "PV_inverter_power"
      - "PV_inverter_current"
      - "PV_inverter_voltage"
      - "PV_inverter_frequency"
      - "PV_inverter_temperature"

  # Storage Model (124) - Batterie-Daten (falls vorhanden)
  storage_model:
    enabled: true
    groups:
      - "PV_battery_power"
      - "PV_battery_soc"
      - "PV_battery_voltage"
      - "PV_battery_current"
      - "PV_battery_energy"

  # Meter Model (203) - Zähler-Daten (falls vorhanden)
  meter_model:
    enabled: true
    groups:
      - "PV_grid_power"
      - "PV_grid_energy"
      - "PV_grid_frequency"

# Berechnete Sensoren (automatisch generiert)
calculated_sensors:
  - name: "Inverter Efficiency"
    type: "sensor"
    state: >-
      {% set ac_power = states('sensor.{PREFIX}_i_ac_power') | default(0) | float %}
      {% set dc_power = states('sensor.{PREFIX}_i_dc_power') | default(0) | float %}
      {% if dc_power > 0 %}
        {{ (ac_power / dc_power * 100) | round(1) }}
      {% else %}
        0
      {% endif %}
    unit_of_measurement: "%"
    device_class: "power_factor"
    state_class: "measurement"
    group: "PV_inverter_efficiency"
    scan_interval: 60

  - name: "Grid Power Balance"
    type: "sensor"
    state: >-
      {% set inverter_power = states('sensor.{PREFIX}_i_ac_power') | default(0) | float %}
      {% set grid_power = states('sensor.{PREFIX}_m_ac_power') | default(0) | float %}
      {{ inverter_power - grid_power }}
    unit_of_measurement: "W"
    device_class: "power"
    state_class: "measurement"
    group: "PV_power_balance"
    scan_interval: 60

  - name: "Battery Charging Power"
    type: "sensor"
    state: >-
      {% if states('sensor.{PREFIX}_s_charge_power') | default(0) | float > 0 %}
        {{ states('sensor.{PREFIX}_s_charge_power') | default(0) | float }}
      {% else %}
        0
      {% endif %}
    unit_of_measurement: "W"
    device_class: "power"
    state_class: "measurement"
    group: "PV_battery_charging"
    scan_interval: 60

  - name: "Battery Discharging Power"
    type: "sensor"
    state: >-
      {% if states('sensor.{PREFIX}_s_discharge_power') | default(0) | float > 0 %}
        {{ states('sensor.{PREFIX}_s_discharge_power') | default(0) | float }}
      {% else %}
        0
      {% endif %}
    unit_of_measurement: "W"
    device_class: "power"
    state_class: "measurement"
    group: "PV_battery_discharging"
    scan_interval: 60

  - name: "Battery State of Charge"
    type: "sensor"
    state: >-
      {% set available_capacity = states('sensor.{PREFIX}_s_available_capacity') | default(0) | float %}
      {% set total_capacity = states('sensor.{PREFIX}_s_total_capacity') | default(0) | float %}
      {% if total_capacity > 0 %}
        {{ (available_capacity / total_capacity * 100) | round(1) }}
      {% else %}
        0
      {% endif %}
    unit_of_measurement: "%"
    device_class: "battery"
    state_class: "measurement"
    group: "PV_battery_soc"
    scan_interval: 60

# Steuerelemente (falls verfügbar)
controls:
  # Batterie-Steuerung (falls Storage Model verfügbar)
  - name: "Battery Charge Limit"
    unique_id: "battery_charge_limit"
    address: "{STORAGE_MODEL_ADDRESS_PLUS_2}"  # Storage Model + 2 (Charge Limit Register)
    input_type: "holding"
    data_type: "uint16"
    min_value: 0
    max_value: 100
    unit_of_measurement: "%"
    device_class: "power_factor"
    group: "PV_battery_control"
    description: "Battery Charge Limit"

  - name: "Battery Discharge Limit"
    unique_id: "battery_discharge_limit"
    address: "{STORAGE_MODEL_ADDRESS_PLUS_3}"  # Storage Model + 3 (Discharge Limit Register)
    input_type: "holding"
    data_type: "uint16"
    min_value: 0
    max_value: 100
    unit_of_measurement: "%"
    device_class: "power_factor"
    group: "PV_battery_control"
    description: "Battery Discharge Limit"

# Template-Metadaten
template_info:
  author: "HA-Modbus-Manager"
  version: "1.0.0"
  last_updated: "2025-01-20"
  compatibility:
    - "Alle SunSpec-konformen Geräte"
  notes: |
    Dieses Template verwendet den SunSpec-Standard.
    Benutzer geben die Modell-Basisadressen an.
    Alle Register werden automatisch aus Standard + Basisadressen berechnet.

    Standard-Modelladressen (Beispiele):
    - Common Model: 40001 (Register 0)
    - Inverter Model: 40069 (Register 68)
    - Storage Model: 40187 (Register 186)
    - Meter Model: 40277 (Register 276)
