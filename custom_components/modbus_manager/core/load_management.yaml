# Load Management System
# Coordinates load distribution between all configured devices

helpers:
  templates:
    # Available surplus power
    - name: "available_surplus_power"
      unique_id: "available_surplus_power"
      value: >
        {% try %}
          {% set data = namespace(pv=0, home=0, battery=0, ev=0) %}
          {% for entity_id in states.sensor | selectattr('entity_id', 'match', '.*total_active_power$') %}
            {% if not is_state(entity_id.entity_id, 'unavailable') and not is_state(entity_id.entity_id, 'unknown') %}
              {% set data.pv = data.pv + entity_id.state | float(0) %}
            {% endif %}
          {% endfor %}
          {% for entity_id in states.sensor | selectattr('entity_id', 'match', '.*home_consumption$') %}
            {% set data.home = data.home + entity_id.state | float(0) %}
          {% endfor %}
          {% for entity_id in states.sensor | selectattr('entity_id', 'match', '.*battery_power$') %}
            {% set data.battery = data.battery + entity_id.state | float(0) %}
          {% endfor %}
          {% for entity_id in states.sensor | selectattr('entity_id', 'match', '.*charging_power$') %}
            {% set data.ev = data.ev + entity_id.state | float(0) %}
          {% endfor %}
          {{ (data.pv - data.home - data.battery - data.ev) | round(0) }}
        {% except %}
          {{ 0 }}  {# Fallback on errors #}
        {% endtry %}
      attributes:
        pv_power: "{{ data.pv }}"
        home_consumption: "{{ data.home }}"
        battery_power: "{{ data.battery }}"
        ev_charging: "{{ data.ev }}"
        last_update: "{{ now() }}"
      unit_of_measurement: "W"
      device_class: "power"

    # Dynamische Lastpriorisierung
    - name: "load_priority_list"
      unique_id: "load_priority_list"
      value: >
        {% set devices = [] %}
        {% set valid_priorities = [] %}
        {% for entity_id in states.number | selectattr('entity_id', 'match', '.*load_priority$') %}
          {% if not is_state(entity_id.entity_id, 'unavailable') %}
            {% set device = namespace() %}
            {% set base_id = entity_id.entity_id.split('_load_priority')[0] %}
            {% if states(base_id ~ '_power') not in ['unavailable', 'unknown'] %}
              {% set device.entity_id = base_id %}
              {% set device.priority = entity_id.state | int(99) %}
              {% set device.min_power = states(base_id ~ '_min_power') | float(0) %}
              {% set device.max_power = states(base_id ~ '_max_power') | float(11000) %}
              {% set device.current_power = states(base_id ~ '_power') | float(0) %}
              {% set device.available = true %}
              {% set devices = devices + [device] %}
              {% set valid_priorities = valid_priorities + [device.priority] %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {{ devices | sort(attribute='priority') | list }}
      attributes:
        valid_device_count: "{{ devices | length }}"
        priority_conflicts: "{{ valid_priorities | length != valid_priorities | unique | length }}"

    # Erweiterte Lastüberwachung
    - name: "load_management_status"
      unique_id: "load_management_status"
      value: >
        {% set data = namespace(
          total_load=0,
          peak_load=0,
          devices=[],
          load_distribution={},
          optimization_potential=0
        ) %}
        
        {# Sammle Lastdaten aller Geräte #}
        {% for entity_id in states.sensor | selectattr('entity_id', 'match', '.*power$') %}
          {% set device_name = entity_id.entity_id.split('.')[1].split('_power')[0] %}
          {% set power = states(entity_id.entity_id)|float(0) %}
          {% set priority = states(device_name ~ '_priority')|int(99) %}
          {% set min_power = states(device_name ~ '_min_power')|float(0) %}
          {% set max_power = states(device_name ~ '_max_power')|float(0) %}
          
          {% set device_data = {
            'name': device_name,
            'current_power': power,
            'priority': priority,
            'min_power': min_power,
            'max_power': max_power,
            'optimization_potential': max_power - power if power < max_power else 0
          } %}
          
          {% set data.devices = data.devices + [device_data] %}
          {% set data.total_load = data.total_load + power %}
          {% set data.peak_load = data.peak_load if data.peak_load > power else power %}
          {% set data.optimization_potential = data.optimization_potential + device_data.optimization_potential %}
        {% endfor %}
        
        {# Berechne Lastverteilung #}
        {% for device in data.devices %}
          {% set data.load_distribution = data.load_distribution.update({
            device.name: (device.current_power / data.total_load * 100)|round(1)
          }) %}
        {% endfor %}
        
        {
          "current_status": {
            "total_load": data.total_load,
            "peak_load": data.peak_load,
            "device_count": data.devices|length,
            "load_distribution": data.load_distribution
          },
          "optimization": {
            "potential": data.optimization_potential,
            "recommendations": data.devices|sort(attribute='optimization_potential', reverse=true)|map(attribute='name')|list
          },
          "devices": data.devices|sort(attribute='priority'),
          "last_update": now()
        }

automations:
  # Dynamische Lastverteilung
  - name: "dynamic_load_distribution"
    unique_id: "dynamic_load_distribution"
    trigger:
      - platform: state
        entity_id: sensor.available_surplus_power
      - platform: state
        entity_id: sensor.load_priority_list
    condition:
      - condition: template
        value_template: "{{ trigger.to_state.state | float(0) != trigger.from_state.state | float(0) }}"
    action:
      - service: script.distribute_power
        data:
          available_power: "{{ states('sensor.available_surplus_power') | float(0) }}"
          priority_list: "{{ states('sensor.load_priority_list') }}"

  # Lastspitzen-Vermeidung
  - name: "peak_load_prevention"
    unique_id: "peak_load_prevention"
    trigger:
      platform: numeric_state
      entity_id: sensor.total_grid_power
      above: 11000
    action:
      - service: script.reduce_managed_loads
        data:
          excess_power: "{{ states('sensor.total_grid_power') | float(0) - 11000 }}"

  # Lastoptimierung
  - name: "load_optimization"
    unique_id: "load_optimization"
    trigger:
      platform: state
      entity_id: sensor.load_management_status
    condition:
      condition: template
      value_template: >
        {% set status = states('sensor.load_management_status')|from_json %}
        {{ status.optimization.potential > 1000 }}  # Mehr als 1kW Optimierungspotential
    action:
      - service: script.optimize_load_distribution
        data:
          optimization_data: "{{ states('sensor.load_management_status') }}"

scripts:
  distribute_power:
    sequence:
      - service: script.calculate_power_distribution
        data:
          available_power: "{{ available_power }}"
          priority_list: "{{ priority_list }}"
      - parallel:
          - repeat:
              count: "{{ priority_list | length }}"
              sequence:
                - service: number.set_value
                  target:
                    entity_id: "{{ priority_list[repeat.index-1].entity_id }}_power_setpoint"
                  data:
                    value: "{{ priority_list[repeat.index-1].calculated_power }}"

  reduce_managed_loads:
    sequence:
      - service: script.calculate_load_reduction
        data:
          excess_power: "{{ excess_power }}"
      - parallel:
          - repeat:
              count: "{{ priority_list | length }}"
              sequence:
                - service: number.set_value
                  target:
                    entity_id: "{{ priority_list[repeat.index-1].entity_id }}_power_setpoint"
                  data:
                    value: "{{ priority_list[repeat.index-1].reduced_power }}"

# Lastmanagement-Konfiguration für unterstützte Geräte

load_management:
  # Prioritäten für Energieflüsse
  priorities:
    - name: "self_consumption"
      description: "Eigenverbrauch maximieren"
      conditions:
        - "pv_power > load_power"
        - "battery_level < battery_max_soc"
      actions:
        - charge_battery:
            power: "min(pv_power - load_power, max_charge_power)"
            
    - name: "grid_charge"
      description: "Netzbezug zu günstigen Zeiten"
      conditions:
        - "grid_price < low_price_threshold"
        - "battery_level < battery_max_soc"
      actions:
        - charge_battery:
            power: "min(available_grid_power, max_charge_power)"
            
    - name: "peak_shaving"
      description: "Lastspitzen vermeiden"
      conditions:
        - "load_power > peak_limit"
        - "battery_level > battery_min_soc"
      actions:
        - discharge_battery:
            power: "min(load_power - peak_limit, max_discharge_power)"

    - name: "pv_surplus_charging"
      description: "PV-Überschussladung für E-Auto"
      conditions:
        - >
          {% set pv_power = states('sensor.{{inverter_name}}_total_active_power')|float(0) %}
          {% set home_power = states('sensor.{{inverter_name}}_load_power')|float(0) %}
          {% set battery_power = states('sensor.{{inverter_name}}_battery_power')|float(0) %}
          {% set surplus = pv_power - home_power %}
          {% set car_connected = is_state('binary_sensor.{{wallbox_name}}_car_connected', 'on') %}
          {% set allow_battery = states('input_boolean.allow_battery_car_charging')|default('off') %}
          {% set battery_level = states('sensor.{{inverter_name}}_battery_level')|float(0) %}
          {% set min_battery_level = states('number.{{inverter_name}}_battery_min_soc')|float(20) %}
          {# Prüfe ob genug PV oder (wenn erlaubt) Batterie-Kapazität verfügbar ist #}
          {{ (surplus > 1000 or (allow_battery == 'on' and battery_level > min_battery_level + 10)) 
             and car_connected }}
      actions:
        - adjust_charging_current:
            value: >
              {% set pv_surplus = pv_power - home_power %}
              {% set battery_available = states('input_boolean.allow_battery_car_charging') == 'on' %}
              {% set max_current = states('number.{{wallbox_name}}_charging_current_limit')|float(32) %}
              {% set min_current = 6 %}  # Mindestladestrom
              
              {# Berechne verfügbare Leistung #}
              {% set available_power = pv_surplus %}
              {% if battery_available and battery_level > min_battery_level + 10 %}
                {% set max_battery_power = states('number.{{inverter_name}}_battery_max_discharge_power')|float(0) %}
                {% set available_power = available_power + max_battery_power %}
              {% endif %}
              
              {% set current = (available_power / 230 / 3)|round(0) %}  # 3-Phasen
              {{ max(min(current, max_current), min_current) }}

  # Gemeinsame Templates
  templates:
    - name: "current_load_priority"
      value: >
        {% set priorities = ['self_consumption', 'grid_charge', 'peak_shaving'] %}
        {% for priority in priorities %}
          {% if is_state('binary_sensor.{{device_name}}_' ~ priority ~ '_active', 'on') %}
            {{ priority }}
            {% break %}
          {% endif %}
        {% endfor %}
        
    - name: "available_power"
      value: >
        {% set pv = states('sensor.{{device_name}}_pv_power')|float(0) %}
        {% set grid = states('sensor.{{device_name}}_grid_power')|float(0) %}
        {% set battery = states('sensor.{{device_name}}_battery_power')|float(0) %}
        {{ pv + grid + battery }}
      unit_of_measurement: "W"

    - name: "pv_charging_status"
      value: >
        {% set pv_power = states('sensor.{{inverter_name}}_total_active_power')|float(0) %}
        {% set charging_power = states('sensor.{{wallbox_name}}_charging_power')|float(0) %}
        {% set battery_power = states('sensor.{{inverter_name}}_battery_power')|float(0) %}
        {% set battery_used = battery_power > 0 and states('input_boolean.allow_battery_car_charging') == 'on' %}
        {% set ratio = (charging_power / pv_power * 100)|round(1) if pv_power > 0 else 0 %}
        {
          "pv_power": pv_power,
          "charging_power": charging_power,
          "battery_power": battery_power,
          "using_battery": battery_used,
          "pv_ratio": ratio,
          "is_pv_charging": ratio > 90 or battery_used
        }

  # Standardautomatisierungen
  automations:
    - name: "peak_load_warning"
      trigger:
        platform: numeric_state
        entity_id: sensor.{{device_name}}_load_power
        above: "{{ peak_warning_threshold }}"
      action:
        service: notify.notify
        data:
          title: "Peak Load Warning"
          message: "Load approaching peak limit: {{ states('sensor.{{device_name}}_load_power') }}W"

    - name: "pv_surplus_charging_control"
      trigger:
        - platform: state
          entity_id: sensor.{{inverter_name}}_total_active_power
        - platform: state
          entity_id: sensor.{{inverter_name}}_load_power
        - platform: state
          entity_id: binary_sensor.{{wallbox_name}}_car_connected
      condition:
        condition: and
        conditions:
          - condition: state
            entity_id: binary_sensor.{{wallbox_name}}_car_connected
            state: "on"
          - condition: template
            value_template: >
              {% set pv_power = states('sensor.{{inverter_name}}_total_active_power')|float(0) %}
              {% set home_power = states('sensor.{{inverter_name}}_load_power')|float(0) %}
              {{ pv_power > home_power + 1000 }}
      action:
        - service: number.set_value
          target:
            entity_id: number.{{wallbox_name}}_charging_current_limit
          data:
            value: >
              {% set pv_power = states('sensor.{{inverter_name}}_total_active_power')|float(0) %}
              {% set home_power = states('sensor.{{inverter_name}}_load_power')|float(0) %}
              {% set surplus = pv_power - home_power %}
              {% set current = (surplus / 230 / 3)|round(0) %}
              {{ max(min(current, 32), 6) }}

    - name: "pv_charging_notification"
      trigger:
        platform: template
        value_template: >
          {% set status = states('sensor.{{device_name}}_pv_charging_status')|from_json %}
          {{ status.is_pv_charging }}
      action:
        service: notify.notify
        data:
          title: >
            {% if status.using_battery %}
              PV- & Batterie-Ladung aktiv
            {% else %}
              PV-Überschussladung aktiv
            {% endif %}
          message: >
            Lade E-Auto mit 
            {% if status.using_battery %}
              Solar- & Batteriestrom
              Batterie-Leistung: {{ status.battery_power }}W
            {% else %}
              Solarstrom
            {% endif %}
            PV-Leistung: {{ status.pv_power }}W
            Ladeleistung: {{ status.charging_power }}W
            PV-Anteil: {{ status.pv_ratio }}%