# Sungrow SH-RT Hybrid Wechselrichter (3-Phasen mit Batterie)
# Basierend auf https://github.com/mkaiser/Sungx-Inverter-Modbus-Home-Assistant

device_info:
  name: "Sungrow SH-RT"
  manufacturer: "Sungrow"
  model: "SH-RT"
  description: "3-Phasen Hybrid Wechselrichter mit Batterie"

device_config:
  # Firmware-Handling
  firmware_handling:
    auto_detect: true
    version_register: 4954
    version_type: "uint16"
    update_on_version_change: true
    fallback_version: "1.0.0"

  # Modbus-Kommunikation
  communication:
    tcp_timeout: 3
    retry_delay: 0.1
    max_retries: 3
    cache_timeout: 300
    batch_size: 100

  # Logging und Metriken
  logging:
    level: "INFO"
    metrics_enabled: true
    communication_log: false
    operation_timeout: 30

  # Standardwerte f체r Polling-Intervalle
  default_polling:
    fast: 5
    normal: 15
    slow: 600

  # Validierung
  validation:
    enabled: true
    timeout: 5
    strict_mode: false

  # Fehlerbehandlung
  error_handling:
    auto_reconnect: true
    reconnect_delay: 60
    max_reconnect_attempts: 3

firmware_versions:
  "1.0.0":  # Original Firmware
    registers:
      read:
        - { name: "running_state", address: 13000, type: "uint16", state_class: "measurement", translation_key: "sensor.running.state", scale: 1, precision: 0 }
        # ... weitere Register

  "1.0.23":  # Neue Firmware mit ge채nderten Registern
    registers:
      read:
        - { name: "battery_power", address: 13025, type: "int32" }
        # ... ge채nderte Register


registers:
  read:
    # System Information
    #- { name: "system_state", address: 12999, type: "uint16", register_type: "input", precision: 0, scale: 1, state_class: "measurement" }
    - { name: "running_state", address: 13000, type: "uint16", register_type: "input", precision: 0, scale: 1, state_class: "measurement", polling: "fast" }
    - { name: "inverter_serial", address: 4989, type: "string", count: 10, polling: "slow" }
    - { name: "device_code", address: 4999, type: "uint16", polling: "slow" }
    - { name: "daily_pv_gen_battery_discharge", address: 5002, type: "uint16", unit_of_measurement: "kWh", device_class: "energy", state_class: "total_increasing", scale: 0.1, precision: 1 }
    - { name: "total_pv_gen_battery_discharge", address: 5003, type: "uint32", unit_of_measurement: "kWh", device_class: "energy", state_class: "total_increasing", scale: 0.1, swap: "word", precision: 1, count: 2 }
    - { name: "inverter_temperature", address: 5007, type: "int16", unit_of_measurement: "째C", device_class: "temperature", state_class: "measurement", scale: 0.1, precision: 1 }
    - { name: "arm_software_version", address: 4953, type: "string", register_type: "input", count: 15, polling: "slow" }
    - { name: "dsp_software_version", address: 4968, type: "string", register_type: "input", count: 15, polling: "slow" }

    # MPPT Values
    - { name: "mppt1_voltage", address: 5010, type: "uint16", unit_of_measurement: "V", device_class: "voltage", state_class: "measurement", scale: 0.1, precision: 1 }
    - { name: "mppt1_current", address: 5011, type: "uint16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 0.1, precision: 2 }
    - { name: "mppt2_voltage", address: 5012, type: "uint16", unit_of_measurement: "V", device_class: "voltage", state_class: "measurement", scale: 0.1, precision: 1 }
    - { name: "mppt2_current", address: 5013, type: "uint16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 0.1, precision: 2 }

    # Grid Values
    - { name: "grid_voltage_l1", address: 5018, type: "uint16", unit_of_measurement: "V", device_class: "voltage", state_class: "measurement", scale: 0.1, precision: 1 }
    - { name: "grid_voltage_l2", address: 5019, type: "uint16", unit_of_measurement: "V", device_class: "voltage", state_class: "measurement", scale: 0.1, precision: 1 }
    - { name: "grid_voltage_l3", address: 5020, type: "uint16", unit_of_measurement: "V", device_class: "voltage", state_class: "measurement", scale: 0.1, precision: 1 }
    - { name: "grid_current_l1", address: 5021, type: "int16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 0.1, precision: 2 }
    - { name: "grid_current_l2", address: 5022, type: "int16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 0.1, precision: 2 }
    - { name: "grid_current_l3", address: 5023, type: "int16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 0.1, precision: 2 }
    - { name: "grid_frequency", address: 5035, type: "uint16", unit_of_measurement: "Hz", device_class: "frequency", state_class: "measurement", scale: 0.1, precision: 2 }

    # Meter Values
    - { name: "meter_power", address: 5600, type: "int32", unit_of_measurement: "W", device_class: "power", state_class: "measurement", scale: 1, precision: 0, swap: word, count: 2, polling: "fast" }
    - { name: "meter_power_l1", address: 5602, type: "int16", unit_of_measurement: "W", device_class: "power", state_class: "measurement", scale: 1, precision: 0, swap: word, count: 2 }
    - { name: "meter_power_l2", address: 5604, type: "int16", unit_of_measurement: "W", device_class: "power", state_class: "measurement", scale: 1, precision: 0, swap: word, count: 2 }
    - { name: "meter_power_l3", address: 5606, type: "int16", unit_of_measurement: "W", device_class: "power", state_class: "measurement", scale: 1, precision: 0, swap: word, count: 2 }
    - { name: "meter_l1_voltage", address: 5740, type: "uint16", unit_of_measurement: "V", device_class: "voltage", state_class: "measurement", scale: 0.1, precision: 1 }
    - { name: "meter_l2_voltage", address: 5741, type: "uint16", unit_of_measurement: "V", device_class: "voltage", state_class: "measurement", scale: 0.1, precision: 1 }
    - { name: "meter_l3_voltage", address: 5742, type: "uint16", unit_of_measurement: "V", device_class: "voltage", state_class: "measurement", scale: 0.1, precision: 1 }
    - { name: "meter_l1_current", address: 5743, type: "uint16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 0.01, precision: 0 }
    - { name: "meter_l2_current", address: 5744, type: "uint16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 0.01, precision: 0 }
    - { name: "meter_l3_current", address: 5745, type: "uint16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 0.01, precision: 0 }

    # Power Values
    - { name: "pv_power", address: 5016, type: "uint32", unit_of_measurement: "W", device_class: "power", state_class: "measurement", scale: 1, swap: "word", precision: 0, count: 2, polling: "fast" }
    - { name: "active_power", address: 5083, type: "int32", unit_of_measurement: "W", device_class: "power", state_class: "measurement", swap: "word", scale: 1, precision: 0, count: 2 }
    - { name: "reactive_power", address: 5032, type: "int32", unit_of_measurement: "W", device_class: "power", state_class: "measurement", swap: "word", scale: 1, precision: 0, count: 2 }
    - { name: "power_factor", address: 5034, type: "int16", unit_of_measurement: "%", device_class: "power_factor", state_class: "measurement", scale: 0.001, precision: 3 }
    - { name: "bdc_power", address: 5627, type: "int16", unit_of_measurement: "W", device_class: "power", state_class: "measurement", scale: 100 }

    # BMS Values
    - { name: "bms_max_charge_current", address: 5634, type: "uint16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 1, precision: 0 }
    - { name: "bms_max_discharge_current", address: 5635, type: "uint16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 1, precision: 0 }

    # Backup Power Values
    - { name: "total_backup_power", address: 5725, type: "int32", unit_of_measurement: "W", device_class: "power", state_class: "measurement", scale: 1, precision: 0, swap:"word", count: 2 }
    - { name: "backup_l1_power", address: 5722, type: "int16", unit_of_measurement: "W", device_class: "power", state_class: "measurement", scale: 1, precision: 0 }
    - { name: "backup_l2_power", address: 5723, type: "int16", unit_of_measurement: "W", device_class: "power", state_class: "measurement", scale: 1, precision: 0 }
    - { name: "backup_l3_power", address: 5724, type: "int16", unit_of_measurement: "W", device_class: "power", state_class: "measurement", scale: 1, precision: 0 }

    # Energy Values
    - { name: "daily_yield", address: 13001, type: "uint16", unit_of_measurement: "kWh", device_class: "energy", state_class: "total_increasing", scale: 0.1, precision: 1, polling: "slow" }
    - { name: "total_pv_generation", address: 13002, type: "uint32", unit_of_measurement: "kWh", device_class: "energy", state_class: "total", scale: 0.1, swap: "word", precision: 1, count: 2, polling: "slow" }
    - { name: "daily_exported_from_pv", address: 13004, type: "uint16", unit_of_measurement: "kWh", device_class: "energy", state_class: "total_increasing", scale: 0.1, precision: 1 }
    - { name: "total_exported_from_pv", address: 13005, type: "uint32", unit_of_measurement: "kWh", device_class: "energy", state_class: "total", scale: 0.1, swap: "word", precision: 1, count: 2 }
    - { name: "load_power", address: 13007, type: "int32", unit_of_measurement: "W", device_class: "power", state_class: "measurement", swap: "word", scale: 1, precision: 0, count: 2, polling: "fast" }
    - { name: "grid_power", address: 13009, type: "int16", unit_of_measurement: "W", device_class: "power", state_class: "measurement", scale: 1, precision: 0, polling: "fast" }
    - { name: "daily_battery_charge_from_pv", address: 13011, type: "uint16", unit_of_measurement: "kWh", device_class: "energy", state_class: "total_increasing", scale: 0.1, precision: 1, polling: "slow" }
    - { name: "total_battery_charge_from_pv", address: 13012, type: "uint32", unit_of_measurement: "kWh", device_class: "energy", state_class: "total", scale: 0.1, swap: "word", precision: 1, count: 2, polling: "slow" }
    - { name: "daily_direct_energy_consumption", address: 13016, type: "uint16", unit_of_measurement: "kWh", device_class: "energy", state_class: "total_increasing", scale: 0.1, precision: 1 }
    - { name: "total_direct_energy_consumption", address: 13017, type: "uint32", unit_of_measurement: "kWh", device_class: "energy", state_class: "total", scale: 0.1, swap: "word", precision: 1, count: 2 }
    - { name: "daily_export_energy", address: 13044, type: "uint16", unit_of_measurement: "kWh", device_class: "energy", state_class: "total", scale: 0.1, polling: "slow" }
    - { name: "total_export_energy", address: 13045, type: "uint32", unit_of_measurement: "kWh", device_class: "energy", state_class: "total", scale: 0.1, count: 2, swap: word, polling: "slow" }
    - { name: "daily_import_energy", address: 13035, type: "uint16", unit_of_measurement: "kWh", device_class: "energy", state_class: "total", scale: 0.1, polling: "slow" }
    - { name: "total_import_energy", address: 13036, type: "uint32", unit_of_measurement: "kWh", device_class: "energy", state_class: "total", scale: 0.1, count: 2, swap: word, polling: "slow" }
    - { name: "daily_consumption", address: 5039, type: "uint16", unit_of_measurement: "kWh", device_class: "energy", state_class: "total", scale: 0.1, polling: "slow" }
    - { name: "total_consumption", address: 5040, type: "uint32", unit_of_measurement: "kWh", device_class: "energy", state_class: "total", scale: 0.1, count: 2, swap: word, polling: "slow" }

    # Battery Values
    - { name: "battery_serial", address: 10710, type: "string", count: 10, polling: "slow" }
    - { name: "battery_voltage", address: 13019, type: "uint16", unit_of_measurement: "V", device_class: "voltage", state_class: "measurement", scale: 0.1 }
    - { name: "battery_current", address: 13020, type: "int16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 0.1 }
    - { name: "battery_power", address: 13021, type: "int32", unit_of_measurement: "W", device_class: "power", state_class: "measurement", swap: "word", count: 2, polling: "fast" }
    - { name: "battery_level", address: 13022, type: "uint16", unit_of_measurement: "%", device_class: "battery", state_class: "measurement", polling: "fast" }
    - { name: "battery_state_of_health", address: 13023, type: "uint16", unit_of_measurement: "%", device_class: "battery", state_class: "measurement", scale: 0.1, precision: 0 }
    - { name: "battery_temperature", address: 13024, type: "int16", unit_of_measurement: "째C", device_class: "temperature", state_class: "measurement", scale: 0.1, precision: 1 }

    # Battery Energy Statistics
    - { name: "daily_battery_charge", address: 13039, type: "uint16", unit_of_measurement: "kWh", device_class: "energy", state_class: "total", scale: 0.1, precision: 1, polling: "slow" }
    - { name: "total_battery_charge", address: 13040, type: "uint32", unit_of_measurement: "kWh", device_class: "energy", state_class: "total", scale: 0.1, precision: 1, count: 2, swap: word, polling: "slow" }
    - { name: "daily_battery_discharge", address: 13025, type: "uint16", unit_of_measurement: "kWh", device_class: "energy", state_class: "total", scale: 0.1, precision: 1, polling: "slow" }
    - { name: "total_battery_discharge", address: 13026, type: "uint32", unit_of_measurement: "kWh", device_class: "energy", state_class: "total", scale: 0.1, precision: 1, count: 2, swap: word, polling: "slow" }

    # current
    - { name: "l1_current", address: 13030, type: "int16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 0.1, precision: 1 }
    - { name: "l2_current", address: 13031, type: "int16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 0.1, precision: 1 }
    - { name: "l3_current", address: 13032, type: "int16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 0.1, precision: 1 }
    - { name: "total_active_power", address: 13033, type: "int32", unit_of_measurement: "W", device_class: "power", state_class: "measurement", swap: "word", scale: 1, precision: 0, count: 2, polling: "fast" }

    
  write:
    # System Control
   # - { name: Inverter start stop, address: 12999, type: "uint16", precision: 0, state_class: measurement, scan_interval: 10 }
    
    # holding registers
    - { name: "bms_mode_selection_raw", address: 13049, type: "uint16" }
    - { name: "battery_forced_charge_discharge", address: 13050, type: "uint16", }
    - { name: "battery_forced_charge_discharge_power", address: 13051, type: "uint16", min: 0, max: 5000 }
    - { name: "battery_max_soc", address: 13057, type: "uint16", unit_of_measurement: "%", device_class: "battery", state_class: "measurement", min: 0, max: 100, scale: 0.1, precision: 1 }
    - { name: "battery_min_soc", address: 13058, type: "uint16", unit_of_measurement: "%", device_class: "battery", state_class: "measurement", min: 0, max: 100, scale: 0.1, precision: 1   }
    # export power limit
    - { name: "export_power_limit", address: 13073, type: "uint16", unit_of_measurement: "W", device_class: "power", state_class: "measurement", min: 0, max: 5000, scale: 1, precision: 0 }
    - { name: "export_power_limit_raw", address: 13086, type: "uint16", min: 0, max: 1 }

    # undocumented
    - { name: "reserved_soc_for_battery", address: 13099, type: "uint16", unit_of_measurement: "%", device_class: "battery", state_class: "measurement", min: 0, max: 100, scale: 1 }

    - { name: "battery_charge_limit", address: 33046, type: "uint16", unit_of_measurement: "W", device_class: "power", state_class: "measurement", scale: 10, precision: 0 }
    - { name: "battery_discharge_limit", address: 33047, type: "uint16", unit_of_measurement: "W", device_class: "power", state_class: "measurement", scale: 10, precision: 0 }
    - { name: "battery_capacity", address: 33048, type: "uint16", unit_of_measurement: "kWh", device_class: "energy", state_class: "total", scale: 0.01, precision: 1 }

    # Grid Control
    - { name: "grid_port_max_power", address: 5154, type: "uint32", min: 0, max: 5000 }
    - { name: "grid_charge_max_power", address: 5155, type: "uint32", min: 0, max: 5000 }
    - { name: "grid_charge_start_time", address: 5156, type: "uint16", min: 0, max: 2359 }
    - { name: "grid_charge_end_time", address: 5157, type: "uint16", min: 0, max: 2359 }

    # Input Select Register
    - { name: "ems_mode", address: 13001, type: "uint16", description: "EMS Mode (0=Self-consumption, 1=Forced, 2=External EMS)" }
    - { name: "battery_forced_charge_discharge", address: 13002, type: "uint16", description: "Battery Forced Charge/Discharge (0=Stop, 1=Charge, 2=Discharge)" }
    - { name: "export_power_limit_mode", address: 13003, type: "uint16", description: "Export Power Limit Mode (0=Disabled, 1=Enabled)" }
    - { name: "global_mpp_scan", address: 13004, type: "uint16", description: "Global MPP Scan (0=Disabled, 1=Enabled)" }

# Berechnete Register
calculated_registers:
  # Berechnete Energiewerte
  - name: "daily_consumed_energy"
    unit_of_measurement: "kWh"
    device_class: "energy"
    state_class: "total"
    precision: 1
    calculation:
      type: "sum"
      sources: ["daily_direct_energy_consumption", "daily_battery_discharge"]

  - name: "total_consumed_energy"
    unit_of_measurement: "kWh"
    device_class: "energy"
    state_class: "total"
    precision: 1
    calculation:
      type: "sum"
      sources: ["total_direct_energy_consumption", "total_battery_discharge"]

  # Berechnete Status-Sensoren
  - name: "battery_forced_charge_discharge_cmd"
    device_class: "enum"
    calculation:
      type: "mapping"
      source: "battery_forced_charge_discharge"
      map: "battery_cmd_mapping"

  - name: "export_power_limit_mode"
    device_class: "enum"
    calculation:
      type: "mapping"
      source: "export_power_limit_raw"
      map: "export_power_limit_mapping"

  - name: "ems_mode_selection"
    device_class: "enum"
    calculation:
      type: "mapping"
      source: "bms_mode_selection_raw"
      map: "ems_mode_mapping"

  # Berechnete Power-Sensoren
  - name: "import_power"
    unit_of_measurement: "W"
    device_class: "power"
    state_class: "measurement"
    calculation:
      type: "conditional"
      source: "grid_power"
      condition: "positive"

  - name: "export_power"
    unit_of_measurement: "W"
    device_class: "power"
    state_class: "measurement"
    calculation:
      type: "conditional"
      source: "grid_power"
      condition: "negative"
      absolute: true

  # Berechnete Battery-Level/Charge Sensoren
  - name: "battery_level_nominal"
    unit_of_measurement: "%"
    device_class: "battery"
    state_class: "measurement"
    calculation:
      type: "formula"
      formula: "battery_level * battery_state_of_health / 100"

  - name: "battery_charge_nominal"
    unit_of_measurement: "kWh"
    device_class: "energy_storage"
    state_class: "measurement"
    calculation:
      type: "formula"
      formula: "battery_capacity * battery_level / 100"

  - name: "battery_charge"
    unit_of_measurement: "kWh"
    device_class: "energy_storage"
    state_class: "measurement"
    calculation:
      type: "formula"
      formula: "battery_capacity * battery_level * battery_state_of_health / 10000"

# some input helper sensors for setting some values
input_number:
  set_min_soc:
    name: Set min SoC
    min: 0
    max: 50
    step: 1
    register:
      name: "battery_min_soc"
      address: 13058
      type: "uint16"
      scale: 0.1
      precision: 1

  set_max_soc:
    name: Set max SoC
    min: 50
    max: 100
    step: 1
    register:
      name: "battery_max_soc"
      address: 13057
      type: "uint16"
      scale: 0.1
      precision: 1

  set_reserved_soc_for_backup:
    name: Set reserved SoC for backup
    min: 0
    max: 100
    step: 1
    register:
      name: "reserved_soc_for_battery"
      address: 13099
      type: "uint16"
      scale: 1
      precision: 0

  set_forced_charge_discharge_power:
    name: Set forced charge discharge power in W
    min: 0
    max: 5000
    step: 100
    register:
      name: "battery_forced_charge_discharge_power"
      address: 13051
      type: "uint16"
      scale: 1
      precision: 0

  set_battery_max_charge_power:
    name: Set max battery charge power in W
    min: 100
    max: 5000
    step: 100
    register:
      name: "battery_charge_limit"
      address: 33046
      type: "uint16"
      scale: 10
      precision: 0

  set_battery_max_discharge_power:
    name: Set max battery discharge power in W
    min: 100
    max: 5000
    step: 100
    register:
      name: "battery_discharge_limit"
      address: 33047
      type: "uint16"
      scale: 10
      precision: 0

  set_battery_charging_start_power:
    name: Set battery charging start power in W
    min: 0
    max: 1000
    step: 10
    register:
      name: "battery_charging_start_power"
      address: 33148
      type: "uint16"
      scale: 10
      precision: 0

  set_battery_discharging_start_power:
    name: Set battery discharging start power in W
    min: 0
    max: 1000
    step: 10
    register:
      name: "battery_discharging_start_power"
      address: 33149
      type: "uint16"
      scale: 10
      precision: 0

  set_export_power_limit:
    name: Set export power limit in W
    min: 0
    max: 5000
    step: 100
    register:
      name: "export_power_limit"
      address: 13073
      type: "uint16"
      scale: 1
      precision: 0
  
  set_forced_charge_discharge_power:
    name: Set forced charge-discharge power
    min: 0
    max: 5000
    step: 100
    unit_of_measurement: "W"
    mode: "slider"
    icon: "mdi:battery-charging"
    description: "Leistung f체r erzwungenes Laden/Entladen"


  set_export_power_limit:
    name: Set export power limit
    min: 0
    max: 5000
    step: 100
    unit_of_measurement: "W"
    mode: "slider"
    icon: "mdi:transmission-tower-export"
    description: "Maximale Export-Leistung"
    
# some input select helper sensors for setting some values
input_select:
  set_inverter_run_mode:
    name: Inverter mode
    options:
      - "Enabled"
      - "Shutdown"
    icon: mdi:power

  set_ems_mode:
    name: Set EMS mode
    options:
      - "Self-consumption mode (default)"
      - "Forced mode"
      - "External EMS"
    icon: mdi:battery-unknown

  set_battery_forced_charge_discharge_cmd:
    name: Set battery forced charge/discharge
    options:
      - "Stop (default)"
      - "Forced charge"
      - "Forced discharge"
    icon: mdi:battery-unknown

  set_export_power_limit_mode:
    name: Set export power limit mode
    options:
      - "Enabled"
      - "Disabled"
    icon: mdi:export

  set_global_mpp_scan_manual:
    name: Global mpp scan manual
    options:
      - "Enabled"
      - "Disabled"
    icon: mdi:export



automation:
  - id: "automation_sungrow_inverter_state"
    alias: "sungrow inverter state"
    description: "Enables/ stops the inverter"
    triggers:
      - trigger: state
        entity_id:
          - input_select.set_inverter_run_mode
    conditions: []
    variables:
      start: 0xCF
      stop: 0xCE
    actions:
      - action: modbus.write_register
        data_template:
          hub: SungrowSHx
          slave: SLAVE_ID
          address: 12999 # reg 13000
          value: >
            {% if is_state('input_select.set_inverter_run_mode', "Enabled") %}
              {{start}}
            {% else %}
              {{stop}}
            {% endif %}
    mode: single

  - id: "automation_sungrow_inverter_update_max_soc"
    alias: "sungrow inverter update max SoC"
    description: "Updates Sungrow max Soc holding register"
    triggers:
      - trigger: state
        entity_id:
          - input_number.set_max_soc
    conditions: []
    actions:
      - action: modbus.write_register
        data_template:
          hub: SungrowSHx
          slave: SLAVE_ID
          address: 13057 # reg 13058
          value: "{{ states('input_number.set_max_soc') | int *10}}"
    mode: single

  - id: "automation_sungrow_inverter_update_min_soc"
    alias: "sungrow inverter update min SoC"
    description: "Updates Sungrow min Soc holding register"
    triggers:
      - trigger: state
        entity_id:
          - input_number.set_min_soc
    conditions: []
    actions:
      - action: modbus.write_register
        data_template:
          hub: SungrowSHx
          slave: SLAVE_ID
          address: 13058 # reg 13059
          value: "{{ states('input_number.set_min_soc') | int *10}}"
    mode: single

  - id: "automation_sungrow_inverter_update_reserved_soc_for_backup"
    alias: "sungrow inverter update reserved soc for backup"
    description: "Updates reserved SoC for backup register"
    triggers:
      - trigger: state
        entity_id:
          - input_number.set_reserved_soc_for_backup
    conditions: []
    actions:
      - action: modbus.write_register
        data_template:
          hub: SungrowSHx
          slave: SLAVE_ID
          address: 13099 # reg 13100
          value: "{{ states('input_number.set_reserved_soc_for_backup') | int}}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_forced_charge_discharge_cmd"
    alias: "sungrow inverter update battery forced charge discharge cmd"
    description: "Updates Sungrow holding register for battery forced charge discharge command"
    triggers:
      - trigger: state
        entity_id:
          - input_select.set_battery_forced_charge_discharge_cmd
    conditions: []
    variables:
      ems_forced_charge: 0xAA
      ems_forced_discharge: 0xBB
      ems_stop_default: 0xCC
    actions:
      - action: modbus.write_register
        data_template:
          hub: SungrowSHx
          slave: SLAVE_ID
          address: 13050 # reg 13051
          value: >
            {% if is_state('input_select.set_battery_forced_charge_discharge_cmd', "Stop (default)") %} 
              {{ems_stop_default}}
            {% elif is_state('input_select.set_battery_forced_charge_discharge_cmd', "Forced charge") %} 
              {{ems_forced_charge}}
            {% elif is_state('input_select.set_battery_forced_charge_discharge_cmd', "Forced discharge") %} 
              {{ems_forced_discharge}}
            {% else %}
              {{ems_stop_default}}
            {% endif %}
    mode: single

  - id: "automation_sungrow_inverter_update_ems_mode"
    alias: "sungrow inverter update EMS mode"
    description: "Updates EMS mode"
    triggers:
      - trigger: state
        entity_id:
          - input_select.set_ems_mode
    conditions: []
    variables:
      ems_mode_self_consume: 0
      ems_mode_forced: 2
      ems_mode_external: 3
      ems_mode_vpp: 4
      ems_mode_microgrid: 8
    actions:
      - action: modbus.write_register
        data_template:
          hub: SungrowSHx
          slave: SLAVE_ID
          address: 13049 # reg 13050
          value: >
            {% if is_state('input_select.set_ems_mode', "Self-consumption mode (default)") %} 
              {{ems_mode_self_consume}}
            {% elif is_state('input_select.set_ems_mode', "Forced mode") %} 
              {{ems_mode_forced}}
            {% elif is_state('input_select.set_ems_mode', "External EMS") %} 
              {{ems_mode_external}}
            {% elif is_state('input_select.set_ems_mode', "VPP") %} 
              {{ems_mode_vpp}}
            {% elif is_state('input_select.set_ems_mode', "MicroGrid") %} 
              {{ems_mode_microgrid}}
            {% else %} 
              {{ems_mode_self_consume}}
            {% endif %}
    mode: single

  - id: "automation_sungrow_export_power_limit_mode"
    alias: "sungrow inverter export power limit mode"
    description: "Set export power limit mode"
    triggers:
      - trigger: state
        entity_id:
          - input_select.set_export_power_limit_mode
    conditions: []
    variables:
      export_limit_enable: 0xAA
      export_limit_disable: 0x55
    actions:
      - action: modbus.write_register
        data_template:
          hub: SungrowSHx
          slave: SLAVE_ID
          address: 13086 # reg 13087
          value: >
            {% if is_state('input_select.set_export_power_limit_mode', "Enabled") %} 
              {{export_limit_enable}}
            {% elif is_state('input_select.set_export_power_limit_mode', "Disabled") %}
              {{export_limit_disable}}
            {% else %}
              {{export_limit_disable}}
            {% endif %}
    mode: single

  - id: "automation_sungrow_inverter_set_export_power_limit"
    alias: "sungrow inverter export power limit"
    description: "Sets export power limit"
    triggers:
      - trigger: state
        entity_id:
          - input_number.set_export_power_limit
    conditions: []
    actions:
      - action: modbus.write_register
        data_template:
          hub: SungrowSHx
          slave: SLAVE_ID
          address: 13073 # reg 13074
          value: "{{ states('input_number.set_export_power_limit') }}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_forced_charge_discharge_power"
    alias: "sungrow inverter update battery forced charge discharge power"
    description: "Sets battery forced charge discharge power"
    triggers:
      - trigger: state
        entity_id:
          - input_number.set_forced_charge_discharge_power
    conditions: []
    actions:
      - action: modbus.write_register
        data_template:
          hub: SungrowSHx
          slave: SLAVE_ID
          address: 13051 # reg 13052
          value: "{{ states('input_number.set_forced_charge_discharge_power') | int}}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_max_charge_power"
    alias: "sungrow inverter update battery max charge power"
    description: "Sets battery max charge power"
    triggers:
      - trigger: state
        entity_id:
          - input_number.set_battery_max_charge_power
    conditions: []
    actions:
      - action: modbus.write_register
        data_template:
          hub: SungrowSHx
          slave: SLAVE_ID
          address: 33046 # reg 33047
          value: "{{ states('input_number.set_battery_max_charge_power') |float /10 |int}}"
    mode: single


  - id: "automation_sungrow_inverter_update_battery_max_discharge_power"
    alias: "sungrow inverter update battery max discharge power"
    description: "Sets battery max discharge power"
    triggers:
      - trigger: state
        entity_id:
          - input_number.set_battery_max_discharge_power
    conditions: []
    actions:
      - action: modbus.write_register
        data_template:
          hub: SungrowSHx
          slave: SLAVE_ID
          address: 33047 # reg 33048
          value: "{{ states('input_number.set_battery_max_discharge_power')  |float /10 |int}}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_discharging_start_power"
    alias: "sungrow inverter update battery discharging start power"
    description: "Sets battery discharging start power"
    triggers:
      - trigger: state
        entity_id:
          - input_number.set_battery_discharging_start_power
    conditions: []
    actions:
      - action: modbus.write_register
        data_template:
          hub: SungrowSHx
          slave: SLAVE_ID
          address: 33149 # reg 33150
          value: "{{ states('input_number.set_battery_discharging_start_power') |float /10 | int}}"
    mode: single

  - id: "automation_sungrow_global_mpp_scan_manual"
    alias: "sungrow inverter global mpp scan manual"
    description: "Set global mpp scan manual"
    triggers:
      - trigger: state
        entity_id:
          - input_select.set_global_mpp_scan_manual
    conditions: []
    variables:
      export_limit_enable: 0xAA
      export_limit_disable: 0x55
    actions:
      - action: modbus.write_register
        data_template:
          hub: SungrowSHx
          slave: SLAVE_ID
          address: 30229 # reg 30230
          value: >
            {% if is_state('input_select.set_global_mpp_scan_manual', "Enabled") %} 
              {{export_limit_enable}}
            {% elif is_state('input_select.set_global_mpp_scan_manual', "Disabled") %}
              {{export_limit_disable}}
            {% else %}
              {{export_limit_disable}}
            {% endif %}
    mode: single

# input sync which syncs the values coming from a modbus register to the input helpers
input_sync:
  # Export Power Limit
  - source_entity: sensor.export_power_limit
    target_entity: input_number.set_export_power_limit

  # Battery SoC Settings
  - source_entity: sensor.max_soc
    target_entity: input_number.set_max_soc
  - source_entity: sensor.min_soc
    target_entity: input_number.set_min_soc
  - source_entity: sensor.reserved_soc_for_backup
    target_entity: input_number.set_reserved_soc_for_backup

  # Battery Power Settings
  - source_entity: sensor.battery_forced_charge_discharge_power
    target_entity: input_number.set_forced_charge_discharge_power
  - source_entity: sensor.battery_max_charge_power
    target_entity: input_number.set_battery_max_charge_power
  - source_entity: sensor.battery_max_discharge_power
    target_entity: input_number.set_battery_max_discharge_power
  - source_entity: sensor.battery_charging_start_power
    target_entity: input_number.set_battery_charging_start_power
  - source_entity: sensor.battery_discharging_start_power
    target_entity: input_number.set_battery_discharging_start_power

  # Mode Settings
  - source_entity: sensor.running_state
    target_entity: input_select.set_inverter_run_mode
    mapping:
      "Stop": "Shutdown"
      "Shutdown": "Shutdown"
      "*": "Enabled"  # Alle anderen Werte
  - source_entity: sensor.battery_forced_charge_discharge_cmd
    target_entity: input_select.set_battery_forced_charge_discharge_cmd
  - source_entity: sensor.ems_mode_selection
    target_entity: input_select.set_ems_mode
  - source_entity: sensor.export_power_limit_mode_raw
    target_entity: input_select.set_export_power_limit_mode
    mapping:
      "170": "Enabled"  # 0x00AA
      "85": "Disabled"  # 0x0055
  - source_entity: sensor.global_mpp_scan_manual_raw
    target_entity: input_select.set_global_mpp_scan_manual
    mapping:
      "170": "Enabled"  # 0x00AA
      "85": "Disabled"  # 0x0055

# mapping for device type
device_type_mapping:
  "0x0D06": "SH3K6"
  "0x0D07": "SH4K6"
  "0x0D09": "SH5K-20"
  "0x0D03": "SH5K-V13"
  "0x0D0A": "SH3K6-30"
  "0x0D0B": "SH4K6-30"
  "0x0D0C": "SH5K-30"
  "0x0D17": "SH3.RS"
  "0x0D0D": "SH3.6RS"
  "0x0D18": "SH4.0RS"
  "0x0D0F": "SH5.0RS"
  "0x0D10": "SH6.0RS"
  "0x0D1A": "SH8.0RS"
  "0x0D1B": "SH10RS"
  "0x0D1C": "SH12RS"
  "0x0E00": "SH5.0RT"
  "0x0E01": "SH6.0RT"
  "0x0E02": "SH8.0RT"
  "0x0E03": "SH10RT"
  "0x0E10": "SH5.0RT-20"
  "0x0E11": "SH6.0RT-20"
  "0x0E12": "SH8.0RT-20"
  "0x0E13": "SH10RT-20"
  "0x0E0C": "SH5.0RT-V112"
  "0x0E0D": "SH6.0RT-V112"
  "0x0E0E": "SH8.0RT-V112"
  "0x0E0F": "SH10RT-V112"
  "0x0E08": "SH5.0RT-V122"
  "0x0E09": "SH6.0RT-V122"
  "0x0E0A": "SH8.0RT-V122"
  "0x0E0B": "SH10RT-V122"
  "0x0E20": "SH5T-V11"
  "0x0E21": "SH6T-V11"
  "0x0E22": "SH8T-V11"
  "0x0E23": "SH10T-V11"
  "0x0E24": "SH12T-V11"
  "0x0E25": "SH15T-V11"
  "0x0E26": "SH20T-V11"
  "0x0E28": "SH25T-V11"

# mapping for system state
system_state_mapping:
  "0x0000": "Running"
  "0x0040": "Running"
  "0x0410": "Off-grid Charge"
  "0x0200": "Update Failed"
  "0x0400": "Maintain mode"
  "0x0800": "Forced mode"
  "0x1000": "Off-grid mode"
  "0x1111": "Un-Initialized"
  "0x0010": "Initial Standby"
  "0x12000": "Initial Standby"
  "0x1300": "Shutdown"
  "0x0002": "Shutdown"
  "0x1400": "Standby"
  "0x0008": "Standby"
  "0x1500": "Emergency Stop"
  "0x0004": "Emergency Stop"
  "0x1600": "Startup"
  "0x0020": "Startup"
  "0x1700": "AFCI self test shutdown"
  "0x1800": "Intelligent Station Building Status"
  "0x1900": "Safe Mode"
  "0x2000": "Open Loop"
  "0x2501": "Restarting"
  "0x4000": "External EMS mode"
  "0x55000": "Fault"
  "0x0100": "Fault"
  "0x8000": "Stop"
  "0x0001": "Stop"
  "0x8100": "De-rating Running"
  "0x0080": "De-rating Running"
  "0x8200": "Dispatch Run"
  "0x9100": "Warn Running"

# mapping for battery command
battery_cmd_mapping:
  "0x00AA": "Forced charge"
  "0x00BB": "Forced discharge"
  "0x00CC": "Stop (default)"

# mapping for export power limit
export_power_limit_mapping:
  "0x00AA": "Enabled"
  "0x0055": "Disabled"

# mapping for ems mode
ems_mode_mapping:
  "0x0000": "Self-consumption mode (default)"
  "0x0002": "Forced mode"
  "0x0003": "External EMS"
  "0x0004": "VPP"
  "0x0008": "MicroGrid"


