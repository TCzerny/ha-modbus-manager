# Sungrow SH-RT Hybrid Wechselrichter (3-Phasen mit Batterie)
# Basierend auf der Protokollversion 1.1.30.0

# Importiere gemeinsame Entities
include:
  - common_entities.yaml

registers:
  read:
    # AC Output
    - { name: "total_active_power", address: 13000, type: "int32", unit_of_measurement: "W", device_class: "power", state_class: "measurement", scale: 1, translation_key: "sensor.inverter.power.total" }
    - { name: "phase_a_voltage", address: 13002, type: "uint16", unit_of_measurement: "V", device_class: "voltage", state_class: "measurement", scale: 0.1, translation_key: "sensor.inverter.voltage.phase_a" }
    - { name: "phase_b_voltage", address: 13003, type: "uint16", unit_of_measurement: "V", device_class: "voltage", state_class: "measurement", scale: 0.1, translation_key: "sensor.inverter.voltage.phase_b" }
    - { name: "phase_c_voltage", address: 13004, type: "uint16", unit_of_measurement: "V", device_class: "voltage", state_class: "measurement", scale: 0.1, translation_key: "sensor.inverter.voltage.phase_c" }
    - { name: "phase_a_current", address: 13005, type: "int16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 0.1, translation_key: "sensor.inverter.current.phase_a" }
    - { name: "phase_b_current", address: 13006, type: "int16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 0.1, translation_key: "sensor.inverter.current.phase_b" }
    - { name: "phase_c_current", address: 13007, type: "int16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 0.1, translation_key: "sensor.inverter.current.phase_c" }
    - { name: "grid_frequency", address: 13008, type: "uint16", unit_of_measurement: "Hz", device_class: "frequency", state_class: "measurement", scale: 0.01, translation_key: "sensor.inverter.grid.frequency" }

    # PV Input
    - { name: "pv1_voltage", address: 13010, type: "uint16", unit_of_measurement: "V", device_class: "voltage", state_class: "measurement", scale: 0.1, translation_key: "sensor.inverter.pv1.voltage" }
    - { name: "pv1_current", address: 13011, type: "uint16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 0.1, translation_key: "sensor.inverter.pv1.current" }
    - { name: "pv1_power", address: 13012, type: "uint32", unit_of_measurement: "W", device_class: "power", state_class: "measurement", translation_key: "sensor.inverter.pv1.power" }
    - { name: "pv2_voltage", address: 13014, type: "uint16", unit_of_measurement: "V", device_class: "voltage", state_class: "measurement", scale: 0.1, translation_key: "sensor.inverter.pv2.voltage" }
    - { name: "pv2_current", address: 13015, type: "uint16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 0.1, translation_key: "sensor.inverter.pv2.current" }
    - { name: "pv2_power", address: 13016, type: "uint32", unit_of_measurement: "W", device_class: "power", state_class: "measurement", translation_key: "sensor.inverter.pv2.power" }

    # Energy Statistics
    - { name: "daily_pv_yield", address: 13030, type: "uint32", unit_of_measurement: "kWh", device_class: "energy", state_class: "total_increasing", scale: 0.1, translation_key: "sensor.inverter.yield.daily" }
    - { name: "total_pv_yield", address: 13032, type: "uint32", unit_of_measurement: "kWh", device_class: "energy", state_class: "total_increasing", scale: 0.1, translation_key: "sensor.inverter.yield.total" }

polling:
  fast:
    interval: 10
    registers: [
      "total_active_power", 
      "operating_state"
    ]
  normal:
    interval: 30
    registers: [
      "phase_a_voltage", "phase_b_voltage", "phase_c_voltage",
      "phase_a_current", "phase_b_current", "phase_c_current",
      "pv1_power", "pv2_power"
    ]
  slow:
    interval: 300
    registers: [
      "daily_pv_yield", "total_pv_yield"
    ]

validation:
  voltage:
    min: 0
    max: 600

helpers:
  templates:
    - name: "self_consumption_rate"
      value: >
        {% set pv_power = states('sensor.pv1_power')|float + states('sensor.pv2_power')|float %}
        {% set grid_power = states('sensor.total_active_power')|float %}
        {% if pv_power > 0 %}
          {{ ((pv_power - grid_power) / pv_power * 100)|round(1) }}
        {% else %}
          0
        {% endif %}
      unit_of_measurement: "%"
      translation_key: "sensor.inverter.metrics.self_consumption"

device_info:
  name: "Sungrow SH-RT Hybrid Inverter"
  manufacturer: "Sungrow"
  model: "SH-RT"
  # ... rest of device specific configuration