# Configuration for Sungrow SGRT three-phase inverters

registers:
  read:
    # Device Information
    - { name: "device_type", address: 0, type: "uint16", translation_key: "sensor.device.info.type", entity_category: "diagnostic" }
    - { name: "serial_number", address: 2, type: "string", count: 8, translation_key: "sensor.device.info.serial_number", entity_category: "diagnostic" }
    - { name: "firmware_version", address: 10, type: "uint16", scale: 0.01, translation_key: "sensor.device.info.firmware_version", entity_category: "diagnostic" }
    
    # Grid Measurements
    - { name: "grid_voltage_l1", address: 100, type: "uint16", unit_of_measurement: "V", device_class: "voltage", state_class: "measurement", scale: 0.1, translation_key: "sensor.grid.electric.voltage_l1" }
    - { name: "grid_current_l1", address: 101, type: "uint16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 0.1, translation_key: "sensor.grid.electric.current_l1" }
    - { name: "grid_voltage_l2", address: 102, type: "uint16", unit_of_measurement: "V", device_class: "voltage", state_class: "measurement", scale: 0.1, translation_key: "sensor.grid.electric.voltage_l2" }
    - { name: "grid_current_l2", address: 103, type: "uint16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 0.1, translation_key: "sensor.grid.electric.current_l2" }
    - { name: "grid_voltage_l3", address: 104, type: "uint16", unit_of_measurement: "V", device_class: "voltage", state_class: "measurement", scale: 0.1, translation_key: "sensor.grid.electric.voltage_l3" }
    - { name: "grid_current_l3", address: 105, type: "uint16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 0.1, translation_key: "sensor.grid.electric.current_l3" }
    - { name: "grid_frequency", address: 106, type: "uint16", unit_of_measurement: "Hz", device_class: "frequency", state_class: "measurement", scale: 0.01, translation_key: "sensor.grid.electric.frequency" }
    - { name: "grid_power_factor", address: 107, type: "int16", scale: 0.001, state_class: "measurement", translation_key: "sensor.grid.electric.power_factor" }
    
    # Power Data
    - { name: "active_power_total", address: 200, type: "int32", unit_of_measurement: "W", device_class: "power", state_class: "measurement", scale: 1, swap: "word", translation_key: "sensor.grid.power.active_total" }
    - { name: "active_power_l1", address: 202, type: "int32", unit_of_measurement: "W", device_class: "power", state_class: "measurement", scale: 1, swap: "word", translation_key: "sensor.grid.power.active_l1" }
    - { name: "active_power_l2", address: 204, type: "int32", unit_of_measurement: "W", device_class: "power", state_class: "measurement", scale: 1, swap: "word", translation_key: "sensor.grid.power.active_l2" }
    - { name: "active_power_l3", address: 206, type: "int32", unit_of_measurement: "W", device_class: "power", state_class: "measurement", scale: 1, swap: "word", translation_key: "sensor.grid.power.active_l3" }
    - { name: "reactive_power_total", address: 208, type: "int32", unit_of_measurement: "var", state_class: "measurement", scale: 1, swap: "word", translation_key: "sensor.grid.power.reactive_total" }
    - { name: "apparent_power_total", address: 210, type: "uint32", unit_of_measurement: "VA", state_class: "measurement", scale: 1, swap: "word", translation_key: "sensor.grid.power.apparent_total" }
    
    # Energy Meters
    - { name: "energy_total", address: 300, type: "uint32", unit_of_measurement: "kWh", device_class: "energy", state_class: "total_increasing", scale: 0.1, swap: "word", translation_key: "sensor.grid.energy.total" }
    - { name: "energy_today", address: 302, type: "uint32", unit_of_measurement: "kWh", device_class: "energy", state_class: "total", scale: 0.1, swap: "word", translation_key: "sensor.grid.energy.today" }
    
    # Temperatures
    - { name: "temperature_internal", address: 400, type: "int16", unit_of_measurement: "°C", device_class: "temperature", state_class: "measurement", scale: 0.1, translation_key: "sensor.device.temperature.internal" }
    - { name: "temperature_heatsink", address: 401, type: "int16", unit_of_measurement: "°C", device_class: "temperature", state_class: "measurement", scale: 0.1, translation_key: "sensor.device.temperature.heatsink" }
    
    # Status and Errors
    - { name: "operating_state", address: 500, type: "uint16", translation_key: "sensor.device.status.state", entity_category: "diagnostic" }
    - { name: "error_code", address: 501, type: "uint16", translation_key: "sensor.device.status.error_code", entity_category: "diagnostic" }
    - { name: "warning_code", address: 502, type: "uint16", translation_key: "sensor.device.status.warning_code", entity_category: "diagnostic" }

  write:
    # Control Registers
    - { name: "active_power_control", address: 1000, type: "uint16", translation_key: "register.grid.control.active_power", entity_category: "config" }
    - { name: "reactive_power_control", address: 1001, type: "uint16", translation_key: "register.grid.control.reactive_power", entity_category: "config" }
    - { name: "power_factor_control", address: 1002, type: "int16", scale: 0.001, translation_key: "register.grid.control.power_factor", entity_category: "config" }

polling:
  fast:
    interval: 10
    registers: ["operating_state", "active_power_total", "grid_voltage_l1", "grid_voltage_l2", "grid_voltage_l3", "grid_current_l1", "grid_current_l2", "grid_current_l3"]
  normal:
    interval: 30
    registers: ["grid_frequency", "reactive_power_total", "apparent_power_total", "temperature_internal", "temperature_heatsink"]
  slow:
    interval: 300
    registers: ["energy_total", "energy_today"]

validation:
  voltage:
    min: 180
    max: 270
  current:
    min: 0
    max: 32
  frequency:
    min: 45
    max: 55
  temperature:
    min: -20
    max: 90
  power:
    min: -22000
    max: 22000
  power_factor:
    min: -1
    max: 1

automations:
  - name: "error_notification"
    trigger:
      platform: state
      entity_id: sensor.error_code
      from: "0"
      to: "!= 0"
    action:
      service: notify.notify
      data:
        title: "{{ 'notification.grid.error.title'|translate }}"
        message: "{{ 'notification.grid.error.message'|translate(error_code=states('sensor.error_code')) }}"

  - name: "high_temperature_warning"
    trigger:
      platform: numeric_state
      entity_id: sensor.temperature_internal
      above: 60
      for: "00:02:00"
    action:
      service: notify.notify
      data:
        title: "{{ 'notification.grid.temperature.warning.title'|translate }}"
        message: "{{ 'notification.grid.temperature.warning.message'|translate(temperature=states('sensor.temperature_internal')) }}"

  - name: "daily_energy_report"
    trigger:
      platform: time
      at: "23:55:00"
    action:
      service: notify.notify
      data:
        title: "{{ 'notification.grid.energy.daily.title'|translate }}"
        message: "{{ 'notification.grid.energy.daily.message'|translate(energy=states('sensor.energy_today')) }}"

  - name: "phase_imbalance_warning"
    trigger:
      platform: template
      value_template: >
        {% set l1 = states('sensor.grid_current_l1')|float %}
        {% set l2 = states('sensor.grid_current_l2')|float %}
        {% set l3 = states('sensor.grid_current_l3')|float %}
        {% set max_diff = max(l1, l2, l3) - min(l1, l2, l3) %}
        {% set avg = (l1 + l2 + l3) / 3 %}
        {{ max_diff > (avg * 0.2) }}
      for: "00:05:00"
    action:
      service: notify.notify
      data:
        title: "{{ 'notification.grid.phase_imbalance.warning.title'|translate }}"
        message: "{{ 'notification.grid.phase_imbalance.warning.message'|translate }}"

helpers:
  templates:
    - name: "power_quality"
      value: >
        {% set pf = states('sensor.grid_power_factor')|float %}
        {% set thd = states('sensor.grid_thd')|float %}
        {{ (100 - (1 - abs(pf)) * 50 - thd * 2)|round(1) }}
      translation_key: "sensor.grid.metrics.power_quality"

    - name: "energy_efficiency"
      value: >
        {% set active = states('sensor.active_power_total')|float %}
        {% set apparent = states('sensor.apparent_power_total')|float %}
        {{ (active / apparent * 100)|round(1) if apparent > 0 else 0 }}
      translation_key: "sensor.grid.metrics.efficiency"

    - name: "phase_balance"
      value: >
        {% set l1 = states('sensor.grid_current_l1')|float %}
        {% set l2 = states('sensor.grid_current_l2')|float %}
        {% set l3 = states('sensor.grid_current_l3')|float %}
        {% set max_diff = max(l1, l2, l3) - min(l1, l2, l3) %}
        {% set avg = (l1 + l2 + l3) / 3 %}
        {{ (max_diff / avg * 100)|round(1) if avg > 0 else 0 }}
      translation_key: "sensor.grid.metrics.phase_balance"