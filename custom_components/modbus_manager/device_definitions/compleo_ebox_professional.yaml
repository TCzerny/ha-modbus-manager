# Compleo eBox Professional Wallbox
# Modbus TCP Implementation

device_info:
  name: "Compleo eBox Professional"
  manufacturer: "Compleo"
  model: "eBox professional"
  supports_energy_monitoring: true
  supports_cost_calculation: true
  supports_load_management: true

registers:
  read:
    # System Information
    - { name: "id", address: 0, type: "string", count: 25 }
    - { name: "serial_number", address: 25, type: "string", count: 25, translation_key: "sensor.device.serial_number" }
    - { name: "active_protocol", address: 50, type: "string", count: 25, translation_key: "sensor.device.protocol" }
    - { name: "manufacturer", address: 100, type: "string", count: 25, translation_key: "sensor.device.manufacturer" }
    #- { name: "platform_type", address: 125, type: "string", count: 25, translation_key: "sensor.device.platform_type" }
    #- { name: "product_type", address: 150, type: "string", count: 25, translation_key: "sensor.device.product_type" }
    - { name: "modbus_table_version", address: 175, type: "uint16" }
    - { name: "firmware", address: 200, type: "string", count: 25, translation_key: "sensor.device.firmware" }
    - { name: "number_of_sockets", address: 225, type: "uint16" }
    - { name: "ocpp_state", address: 250, type: "uint16" }
    - { name: "socket_1_mode_3_state", address: 275, type: "string", count: 25, translation_key: "sensor.device.status" }
    - { name: "socket_1_cable_state", address: 300, type: "uint16", translation_key: "sensor.device.cable_status" }
    
    # Power Measurements
    - { name: "actual_max_current_l1", address: 1000, type: "float32", unit_of_measurement: "A", device_class: "current", state_class: "measurement" }
    - { name: "actual_max_current_l2", address: 1002, type: "float32", unit_of_measurement: "A", device_class: "current", state_class: "measurement" }
    - { name: "actual_max_current_l3", address: 1004, type: "float32", unit_of_measurement: "A", device_class: "current", state_class: "measurement" }
    - { name: "current_l1", address: 1006, type: "float32", unit_of_measurement: "A", device_class: "current", state_class: "measurement" }
    - { name: "current_l2", address: 1008, type: "float32", unit_of_measurement: "A", device_class: "current", state_class: "measurement" }
    - { name: "current_l3", address: 1010, type: "float32", unit_of_measurement: "A", device_class: "current", state_class: "measurement" }
    - { name: "voltage_l1", address: 301, type: "float32", unit_of_measurement: "V", device_class: "voltage", state_class: "measurement" }
    - { name: "voltage_l2", address: 303, type: "float32", unit_of_measurement: "V", device_class: "voltage", state_class: "measurement" }
    - { name: "voltage_l3", address: 305, type: "float32", unit_of_measurement: "V", device_class: "voltage", state_class: "measurement" }
    
  write:
    # Control Registers
    - { name: "max_current_l1", address: 1012, type: "float32", min: 0, max: 32, unit_of_measurement: "A" }
    - { name: "max_current_l2", address: 1014, type: "float32", min: 0, max: 32, unit_of_measurement: "A" }
    - { name: "max_current_l3", address: 1016, type: "float32", min: 0, max: 32, unit_of_measurement: "A" }
    - { name: "fallback_max_current_l1", address: 1018, type: "float32", min: 0, max: 32, unit_of_measurement: "A" } # comment for now as this should not be used
    - { name: "fallback_max_current_l2", address: 1020, type: "float32", min: 0, max: 32, unit_of_measurement: "A" } # comment for now as this should not be used
    - { name: "fallback_max_current_l3", address: 1022, type: "float32", min: 0, max: 32, unit_of_measurement: "A" } # comment for now as this should not be used
    - { name: "remaining_time_before_fallback", address: 1024, type: "uint16"}
    - { name: "operative_state_of_box", address: 1028, type: "uint16", translation_key: "sensor.device.availability"}

polling:
  fast:
    interval: 10
    registers: [
      "socket_1_mode_3_state",
      "socket_1_cable_state",
      "current_l1",
      "current_l2",
      "current_l3",
      "voltage_l1",
      "voltage_l2",
      "voltage_l3",
      "actual_max_current_l1",
      "actual_max_current_l2",
      "actual_max_current_l3"
    ]
  normal:
    interval: 30
    registers: [
      "active_protocol"
    ]
  slow:
    interval: 600
    registers: [
      "id",
      "serial_number",
      "manufacturer",
      "firmware",
      "modbus_table_version",
      "number_of_sockets",
      "ocpp_state",
    ]

device_specific_templates:
  - name: "Current Load of Wallbox"
    unit_of_measurement: W
    device_class: power
    state: >
      {% if states('sensor.{{device_name}}_current_l1') | float(0) > 0.11 or
      states('sensor.{{device_name}}_current_l2') | float(0) > 0.11 or
      states('sensor.{{device_name}}_current_l3') | float(0) > 0.11 %}
        {{ ( ( states('sensor.{{device_name}}_current_l1') | float + states('sensor.{{device_name}}_current_l2') | float  + states('sensor.{{device_name}}_current_l3') | float ) - 0.10 ) * 220 }}
      {%- else -%}
        0
      {%- endif %}


#  - name: "charging_cost"
#    value: >
#      {% set energy = states('sensor.{{device_name}}_energy_session')|float(0) %}
#      {% set price = states('sensor.current_electricity_price')|float(0.30) %}
#      {{ (energy * price)|round(2) }}
#    unit_of_measurement: "â‚¬"
#    icon: "mdi:currency-eur"


device_specific_automations:
  - name: "charging_complete"
    trigger:
      platform: state
      entity_id: sensor.{{device_name}}_charging_state
      to: "completed"
    action:
      service: notify.notify
      data:
        title: "{{ 'notification.charging.complete.title'|translate }}"
        message: "{{ 'notification.charging.complete.message'|translate(energy=states('sensor.{{device_name}}_energy_session'), cost=states('sensor.{{device_name}}_charging_cost')) }}"

  - name: "{{device_name}}_automation_update_max_current_phases"
    alias: "{{device_name}} update max current phases"
    description: "Sets max current phase value. Below 6 always set to 0"
    trigger:
      - platform: state
        entity_id:
          - input_number.{{device_name}}_set_max_current_phases
    condition:
      - condition: state
        entity_id: sensor.ebox_cable_status
        state: "3"

    action:
      - choose:
        - conditions:
            - condition: numeric_state
              entity_id: input_number.{{device_name}}_set_max_current_phases
              below: 6
          sequence:
            - service: modbus.write_register
              data:
                address: 1012
                value:
                  - 0
                  - 0
                  - 0
                  - 0
                  - 0
                  - 0
        - conditions:
            - condition: numeric_state
              entity_id: input_number.{{device_name}}_set_max_current_phases
              above: 5
          sequence:
            - service: modbus.write_register
              data_template:
                address: 1012
                value: >
                  [{{ '0x%04x' % unpack(pack([[states('input_number.{{device_name}}_set_max_current_phases')|float(0), 16] | min, 5] | max, ">f")
                  , ">h") | abs }}, {{ '0x%04x' %
                  unpack(pack([[states('input_number.{{device_name}}_set_max_current_phases')|float(0),
                  16] | min, 0] | max, ">f"), ">h", offset=2) | abs }}, {{ '0x%04x' % unpack(pack([[states('input_number.{{device_name}}_set_max_current_phases')|float(0), 16] | min, 5] | max, ">f")
                  , ">h") | abs }}, {{ '0x%04x' %
                  unpack(pack([[states('input_number.{{device_name}}_set_max_current_phases')|float(0),
                  16] | min, 0] | max, ">f"), ">h", offset=2) | abs }}, {{ '0x%04x' % unpack(pack([[states('input_number.{{device_name}}_set_max_current_phases')|float(0), 16] | min, 5] | max, ">f")
                  , ">h") | abs }}, {{ '0x%04x' %
                  unpack(pack([[states('input_number.{{device_name}}_set_max_current_phases')|float(0),
                  16] | min, 0] | max, ">f"), ">h", offset=2) | abs }}]
    mode: single

helpers:
  input_boolean:
    - name: "{{device_name}}_set_max_current_phases"
      initial: 0
      min: 0
      max: 16
      step: 1
      icon: "mdi:car-battery"
      translation_key: "input_boolean.set_max_current_phases"