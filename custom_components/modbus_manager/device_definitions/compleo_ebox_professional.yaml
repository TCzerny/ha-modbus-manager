# Compleo eBox Professional Wallbox
# Modbus TCP Implementation

device_info:
  name: "Compleo eBox Professional"
  manufacturer: "Compleo"
  model: "eBox professional"
  supports_energy_monitoring: true
  supports_cost_calculation: true
  supports_load_management: true

registers:
  read:
    # System Information
    - { name: "serial_number", address: 1000, type: "string", count: 10 }
    - { name: "firmware_version", address: 1010, type: "string", count: 5 }
    - { name: "device_status", address: 1020, type: "uint16", translation_key: "sensor.device.status" }
    
    # Charging Status
    - { name: "charging_state", address: 2000, type: "uint16", translation_key: "sensor.charging.state" }
    - { name: "connected_state", address: 2001, type: "uint16", translation_key: "sensor.connection.state" }
    - { name: "error_code", address: 2002, type: "uint16", translation_key: "sensor.error.code" }
    
    # Power Measurements
    - { name: "charging_power", address: 2100, type: "uint32", unit_of_measurement: "W", device_class: "power", state_class: "measurement" }
    - { name: "voltage_l1", address: 2102, type: "uint16", unit_of_measurement: "V", device_class: "voltage", state_class: "measurement", scale: 0.1 }
    - { name: "voltage_l2", address: 2103, type: "uint16", unit_of_measurement: "V", device_class: "voltage", state_class: "measurement", scale: 0.1 }
    - { name: "voltage_l3", address: 2104, type: "uint16", unit_of_measurement: "V", device_class: "voltage", state_class: "measurement", scale: 0.1 }
    - { name: "current_l1", address: 2105, type: "uint16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 0.1 }
    - { name: "current_l2", address: 2106, type: "uint16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 0.1 }
    - { name: "current_l3", address: 2107, type: "uint16", unit_of_measurement: "A", device_class: "current", state_class: "measurement", scale: 0.1 }
    
    # Energy Measurements
    - { name: "energy_total", address: 2200, type: "uint32", unit_of_measurement: "kWh", device_class: "energy", state_class: "total_increasing", scale: 0.1 }
    - { name: "energy_session", address: 2202, type: "uint32", unit_of_measurement: "kWh", device_class: "energy", state_class: "total_increasing", scale: 0.1 }
    
    # Temperature
    - { name: "temperature", address: 2300, type: "int16", unit_of_measurement: "°C", device_class: "temperature", state_class: "measurement", scale: 0.1 }

  write:
    # Control Registers
    - { name: "charging_current_limit", address: 3000, type: "uint16", min: 6, max: 32, unit_of_measurement: "A" }
    - { name: "start_stop_charging", address: 3001, type: "uint16", min: 0, max: 1 }
    - { name: "reset_error", address: 3002, type: "uint16", min: 0, max: 1 }

polling:
  fast:
    interval: 5
    registers: [
      "charging_state",
      "charging_power",
      "connected_state",
      "error_code"
    ]
  normal:
    interval: 30
    registers: [
      "voltage_l1", "voltage_l2", "voltage_l3",
      "current_l1", "current_l2", "current_l3",
      "temperature",
      "energy_session"
    ]
  slow:
    interval: 300
    registers: [
      "energy_total",
      "device_status"
    ]

device_specific_templates:
  - name: "charging_efficiency"
    value: >
      {% set power_in = states('sensor.{{device_name}}_charging_power')|float(0) %}
      {% set power_out = states('sensor.{{device_name}}_output_power')|float(0) %}
      {{ ((power_out / power_in * 100) if power_in > 0 else 0)|round(1) }}
    unit_of_measurement: "%"
    icon: "mdi:battery-charging"

  - name: "charging_cost"
    value: >
      {% set energy = states('sensor.{{device_name}}_energy_session')|float(0) %}
      {% set price = states('sensor.electricity_price')|float(0.30) %}
      {{ (energy * price)|round(2) }}
    unit_of_measurement: "€"
    icon: "mdi:currency-eur"

  - name: "pv_charging_efficiency"
    value: >
      {% set status = states('sensor.{{device_name}}_pv_charging_status')|from_json %}
      {% set pv_power = status.pv_power %}
      {% set charging_power = status.charging_power %}
      {% if charging_power > 0 and pv_power > 0 %}
        {{ (charging_power / pv_power * 100)|round(1) }}
      {% else %}
        0
      {% endif %}
    unit_of_measurement: "%"
    icon: "mdi:solar-power"

  - name: "charging_source"
    value: >
      {% set status = states('sensor.{{device_name}}_pv_charging_status')|from_json %}
      {% if status.using_battery %}
        "solar_battery"
      {% elif status.is_pv_charging %}
        "solar"
      {% elif states('sensor.{{device_name}}_charging_power')|float(0) > 0 %}
        "grid"
      {% else %}
        "none"
      {% endif %}
    icon: >
      {% if value == "solar_battery" %}
        mdi:battery-charging-100
      {% elif value == "solar" %}
        mdi:solar-power
      {% elif value == "grid" %}
        mdi:transmission-tower
      {% else %}
        mdi:power-plug-off
      {% endif %}

device_specific_automations:
  - name: "charging_complete"
    trigger:
      platform: state
      entity_id: sensor.{{device_name}}_charging_state
      to: "completed"
    action:
      service: notify.notify
      data:
        title: "{{ 'notification.charging.complete.title'|translate }}"
        message: "{{ 'notification.charging.complete.message'|translate(energy=states('sensor.{{device_name}}_energy_session'), cost=states('sensor.{{device_name}}_charging_cost')) }}"

  - name: "high_temperature_warning"
    trigger:
      platform: numeric_state
      entity_id: sensor.{{device_name}}_temperature
      above: 60
    action:
      service: notify.notify
      data:
        title: "Hohe Temperatur"
        message: "Wallbox Temperatur: {{ states('sensor.{{device_name}}_temperature') }}°C"

helpers:
  input_boolean:
    - name: "allow_battery_car_charging"
      initial: false
      icon: "mdi:car-battery"
      translation_key: "input_boolean.allow_battery_car_charging"