# Load Management System
# Koordiniert die Lastverteilung zwischen allen konfigurierten Geräten

helpers:
  templates:
    # Verfügbare Überschussleistung
    - name: "available_surplus_power"
      unique_id: "available_surplus_power"
      value: >
        {% try %}
          {% set data = namespace(pv=0, home=0, battery=0, ev=0) %}
          {% for entity_id in states.sensor | selectattr('entity_id', 'match', '.*total_active_power$') %}
            {% if not is_state(entity_id.entity_id, 'unavailable') and not is_state(entity_id.entity_id, 'unknown') %}
              {% set data.pv = data.pv + entity_id.state | float(0) %}
            {% endif %}
          {% endfor %}
          {% for entity_id in states.sensor | selectattr('entity_id', 'match', '.*home_consumption$') %}
            {% set data.home = data.home + entity_id.state | float(0) %}
          {% endfor %}
          {% for entity_id in states.sensor | selectattr('entity_id', 'match', '.*battery_power$') %}
            {% set data.battery = data.battery + entity_id.state | float(0) %}
          {% endfor %}
          {% for entity_id in states.sensor | selectattr('entity_id', 'match', '.*charging_power$') %}
            {% set data.ev = data.ev + entity_id.state | float(0) %}
          {% endfor %}
          {{ (data.pv - data.home - data.battery - data.ev) | round(0) }}
        {% except %}
          {{ 0 }}  {# Fallback bei Fehlern #}
        {% endtry %}
      attributes:
        pv_power: "{{ data.pv }}"
        home_consumption: "{{ data.home }}"
        battery_power: "{{ data.battery }}"
        ev_charging: "{{ data.ev }}"
        last_update: "{{ now() }}"
      unit_of_measurement: "W"
      device_class: "power"

    # Dynamische Lastpriorisierung
    - name: "load_priority_list"
      unique_id: "load_priority_list"
      value: >
        {% set devices = [] %}
        {% set valid_priorities = [] %}
        {% for entity_id in states.number | selectattr('entity_id', 'match', '.*load_priority$') %}
          {% if not is_state(entity_id.entity_id, 'unavailable') %}
            {% set device = namespace() %}
            {% set base_id = entity_id.entity_id.split('_load_priority')[0] %}
            {% if states(base_id ~ '_power') not in ['unavailable', 'unknown'] %}
              {% set device.entity_id = base_id %}
              {% set device.priority = entity_id.state | int(99) %}
              {% set device.min_power = states(base_id ~ '_min_power') | float(0) %}
              {% set device.max_power = states(base_id ~ '_max_power') | float(11000) %}
              {% set device.current_power = states(base_id ~ '_power') | float(0) %}
              {% set device.available = true %}
              {% set devices = devices + [device] %}
              {% set valid_priorities = valid_priorities + [device.priority] %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {{ devices | sort(attribute='priority') | list }}
      attributes:
        valid_device_count: "{{ devices | length }}"
        priority_conflicts: "{{ valid_priorities | length != valid_priorities | unique | length }}"

automations:
  # Dynamische Lastverteilung
  - name: "dynamic_load_distribution"
    unique_id: "dynamic_load_distribution"
    trigger:
      - platform: state
        entity_id: sensor.available_surplus_power
      - platform: state
        entity_id: sensor.load_priority_list
    condition:
      - condition: template
        value_template: "{{ trigger.to_state.state | float(0) != trigger.from_state.state | float(0) }}"
    action:
      - service: script.distribute_power
        data:
          available_power: "{{ states('sensor.available_surplus_power') | float(0) }}"
          priority_list: "{{ states('sensor.load_priority_list') }}"

  # Lastspitzen-Vermeidung
  - name: "peak_load_prevention"
    unique_id: "peak_load_prevention"
    trigger:
      platform: numeric_state
      entity_id: sensor.total_grid_power
      above: 11000
    action:
      - service: script.reduce_managed_loads
        data:
          excess_power: "{{ states('sensor.total_grid_power') | float(0) - 11000 }}"

scripts:
  distribute_power:
    sequence:
      - service: script.calculate_power_distribution
        data:
          available_power: "{{ available_power }}"
          priority_list: "{{ priority_list }}"
      - parallel:
          - repeat:
              count: "{{ priority_list | length }}"
              sequence:
                - service: number.set_value
                  target:
                    entity_id: "{{ priority_list[repeat.index-1].entity_id }}_power_setpoint"
                  data:
                    value: "{{ priority_list[repeat.index-1].calculated_power }}"

  reduce_managed_loads:
    sequence:
      - service: script.calculate_load_reduction
        data:
          excess_power: "{{ excess_power }}"
      - parallel:
          - repeat:
              count: "{{ priority_list | length }}"
              sequence:
                - service: number.set_value
                  target:
                    entity_id: "{{ priority_list[repeat.index-1].entity_id }}_power_setpoint"
                  data:
                    value: "{{ priority_list[repeat.index-1].reduced_power }}"