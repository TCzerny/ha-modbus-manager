# Common entities for all Modbus devices
# Provides base functionality for multi-device setups
# Keine Register-Definitionen, nur Templates und Automationen

helpers:
  templates:
    # Gesamt PV-Ertrag aller Wechselrichter
    - name: "total_pv_yield_all"
      unique_id: "total_pv_yield_all"
      value: >
        {% set total = namespace(sum=0) %}
        {% for entity_id in states.sensor | selectattr('entity_id', 'match', '.*total_pv_yield$') %}
          {% set total.sum = total.sum + entity_id.state | float(0) %}
        {% endfor %}
        {{ total.sum | round(2) }}
      unit_of_measurement: "kWh"
      device_class: "energy"
      state_class: "total_increasing"
      translation_key: "sensor.system.total_yield"

    # Aktuelle Gesamt-PV-Leistung
    - name: "total_active_power_all"
      unique_id: "total_active_power_all"
      value: >
        {% set total = namespace(sum=0) %}
        {% for entity_id in states.sensor | selectattr('entity_id', 'match', '.*total_active_power$') %}
          {% set total.sum = total.sum + entity_id.state | float(0) %}
        {% endfor %}
        {{ total.sum | round(0) }}
      unit_of_measurement: "W"
      device_class: "power"
      state_class: "measurement"
      translation_key: "sensor.system.total_power"

    # Dynamische Stromkosten/Ertrag Berechnung pro Tag
    - name: "dynamic_energy_costs_today"
      unique_id: "dynamic_energy_costs_today"
      value: >
        {% set cache_key = now().strftime('%Y%m%d_%H') %}
        {% if state_attr('sensor.dynamic_energy_costs_today', 'cache_key') == cache_key %}
          {{ state_attr('sensor.dynamic_energy_costs_today', 'value') }}
        {% else %}
          {% set data = namespace(cost=0, income=0) %}
          {% set current_hour = now().hour %}
          {% for hour in range(current_hour + 1) %}
            {% set price = states('sensor.electricity_price_' ~ '%02d' | format(hour)) | float(0) %}
            {% set consumption = states('sensor.energy_consumption_hour_' ~ '%02d' | format(hour)) | float(0) %}
            {% set feedin = states('sensor.energy_feedin_hour_' ~ '%02d' | format(hour)) | float(0) %}
            {% set data.cost = data.cost + (consumption * price) %}
            {% set data.income = data.income + (feedin * (price * 0.8)) %}
          {% endfor %}
          {% set result = (data.cost - data.income) | round(2) %}
          {{ result }}
        {% endif %}
      attributes:
        cache_key: "{{ now().strftime('%Y%m%d_%H') }}"
        last_calculation: "{{ now() }}"
      unit_of_measurement: "€"
      device_class: "monetary"

    # Riemann'sche Summe für Energiekosten (Monat)
    - name: "monthly_energy_costs"
      unique_id: "monthly_energy_costs"
      value: >
        {% set data = namespace(sum=0) %}
        {% set start_of_month = now().replace(day=1, hour=0, minute=0, second=0, microsecond=0) %}
        {% set days = (now() - start_of_month).days %}
        {% for day in range(days + 1) %}
          {% set daily_cost = states('sensor.dynamic_energy_costs_' ~ (start_of_month + timedelta(days=day)).strftime('%Y%m%d')) | float(0) %}
          {% set data.sum = data.sum + daily_cost %}
        {% endfor %}
        {{ data.sum | round(2) }}
      unit_of_measurement: "€"
      device_class: "monetary"
      translation_key: "sensor.system.energy_costs_month"

    # Ergänzung: Gesamtübersicht aller PV-Anlagen
    - name: "pv_system_overview"
      unique_id: "pv_system_overview"
      value: >
        {% set data = namespace(yield=0, power=0, devices=0) %}
        {% for entity_id in states.sensor | selectattr('entity_id', 'match', '.*total_pv_yield$') %}
          {% set data.yield = data.yield + entity_id.state | float(0) %}
          {% set data.devices = data.devices + 1 %}
        {% endfor %}
        {% for entity_id in states.sensor | selectattr('entity_id', 'match', '.*total_active_power$') %}
          {% set data.power = data.power + entity_id.state | float(0) %}
        {% endfor %}
        {
          "total_yield": data.yield,
          "current_power": data.power,
          "device_count": data.devices,
          "last_updated": now()
        }
      translation_key: "sensor.system.pv_overview"

    # Geräte-Gesundheitsstatus
    - name: "devices_health_status"
      unique_id: "devices_health_status"
      value: >
        {% set devices = namespace(healthy=0, total=0, issues=[]) %}
        {% for entity_id in states.sensor | selectattr('entity_id', 'match', '.*operating_state$') %}
          {% set devices.total = devices.total + 1 %}
          {% if not is_state(entity_id.entity_id, 'unavailable') 
             and not is_state(entity_id.entity_id, 'unknown') %}
            {% set devices.healthy = devices.healthy + 1 %}
          {% else %}
            {% set devices.issues = devices.issues + [entity_id.entity_id] %}
          {% endif %}
        {% endfor %}
        {
          "healthy_devices": devices.healthy,
          "total_devices": devices.total,
          "health_percentage": (devices.healthy / devices.total * 100) if devices.total > 0 else 0,
          "issues": devices.issues,
          "last_check": now()
        }

automations:
  # Tägliche Energiestatistik
  - name: "daily_energy_statistics"
    unique_id: "daily_energy_statistics"
    trigger:
      platform: time
      at: "23:59:59"
    action:
      - service: input_number.set_value
        data:
          entity_id: input_number.daily_energy_statistics
          value: >
            {% set yield = states('sensor.total_pv_yield_all') | float(0) %}
            {% set consumption = states('sensor.total_consumption_all') | float(0) %}
            {% set feedin = states('sensor.total_feedin_all') | float(0) %}
            {{ yield - consumption - feedin }}
      - service: recorder.purge
        data:
          keep_days: 7
          repack: true

  # Geräte-Monitoring
  - name: "device_monitoring"
    unique_id: "device_monitoring"
    trigger:
      platform: time_pattern
      minutes: "/5"
    action:
      - service: persistent_notification.create
        data:
          title: "Modbus Geräte Status"
          message: >
            {% set status = states('sensor.devices_health_status') | from_json %}
            Gesunde Geräte: {{ status.healthy_devices }}/{{ status.total_devices }} ({{ status.health_percentage }}%)
            {% if status.issues | length > 0 %}
            Probleme mit:
            {% for issue in status.issues %}
              - {{ issue }}
            {% endfor %}
            {% endif %}

validation:
  power:
    min: 0
    max: 100000  # 100kW
  energy:
    min: 0
    max: 1000000  # 1000kWh
  monetary:
    min: -1000
    max: 1000